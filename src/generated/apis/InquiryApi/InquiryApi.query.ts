/**
 * !DO NOT EDIT THIS FILE
 *
 * 스크립트가 실행될때, 파일을 항상 새로 쓰기 때문에 파일 수정시 작성내용이 제거 될 수 있습니다.
 */
/**
 * tok-cli.config.ts 에서 설정된 instance 경로의 axios instace 가 적용된, api 의 instance 입니다.
 */
import {
  InfiniteData,
  useInfiniteQuery,
  useMutation,
  useQuery,
} from '@tanstack/react-query'

import { fetchExtended } from '@/configs/fetch/fetch-extend'

import { ErrorResponseDTOCommonType } from '../@types/data-contracts'
import {
  InfiniteQueryHookParams,
  MutationHookParams,
  Parameter,
  QueryHookParams,
  RequestFnReturn,
} from '../@types/react-query-type'
import { InquiryApiApi } from './InquiryApi.api'

export const inquiryApiApi = new InquiryApiApi({ customFetch: fetchExtended })

/**
 * query key 에 undefined 를 포함시키지 않기 위한 함수입니다.
 */
const isDefined = (v: unknown) => typeof v !== 'undefined'

/**
 * query-keys
 */

export const QUERY_KEY_INQUIRY_API_API = {
  GET_MY_INQUIRY_LIST: (
    variables?: Parameter<typeof inquiryApiApi.getMyInquiryList>,
  ) => ['GET_MY_INQUIRY_LIST', variables].filter(isDefined),
  GET_MY_INQUIRY_LIST_INFINITE: (
    variables?: Parameter<typeof inquiryApiApi.getMyInquiryList>,
  ) => ['GET_MY_INQUIRY_LIST_INFINITE', variables].filter(isDefined),
  ADD_INQUIRY: () => ['ADD_INQUIRY'],
}

/**
 * @description ## 1:1 문의 조회
 *
 * @tags [Inquiry API]
 * @name GetMyInquiryList
 * @summary 1:1 문의 조회
 * @request GET:/v1/inquiry
 * @secure    */

export const useGetMyInquiryListQuery = <
  TData = RequestFnReturn<typeof inquiryApiApi.getMyInquiryList>,
>(
  params?: QueryHookParams<
    typeof inquiryApiApi.getMyInquiryList,
    {
      error:
        | ErrorResponseDTOCommonType
        | {
            /** @example "UNAUTHORIZED_ACCESS" */
            errorCode?: string
            /** @example "인증이 필요한 접근입니다" */
            description?: string
          }
        | {
            /** @example "ACCESS_DENIED" */
            errorCode?: string
            /** @example "접근이 거부되었습니다" */
            description?: string
          }
    },
    TData
  >,
) => {
  const queryKey = QUERY_KEY_INQUIRY_API_API.GET_MY_INQUIRY_LIST(
    params?.variables,
  )
  return useQuery({
    queryKey,
    queryFn: () => inquiryApiApi.getMyInquiryList(params?.variables),
    ...params?.options,
  })
}

/**
 * @description ## 1:1 문의 조회    *      * @tags [Inquiry API]
 * @name GetMyInquiryList
 * @summary 1:1 문의 조회
 * @request GET:/v1/inquiry
 * @secure    */

export const useGetMyInquiryListInfiniteQuery = <
  TData = InfiniteData<
    RequestFnReturn<typeof inquiryApiApi.getMyInquiryList>,
    Parameter<typeof inquiryApiApi.getMyInquiryList>
  >,
>(
  params?: InfiniteQueryHookParams<
    typeof inquiryApiApi.getMyInquiryList,
    | ErrorResponseDTOCommonType
    | {
        /** @example "UNAUTHORIZED_ACCESS" */
        errorCode?: string
        /** @example "인증이 필요한 접근입니다" */
        description?: string
      }
    | {
        /** @example "ACCESS_DENIED" */
        errorCode?: string
        /** @example "접근이 거부되었습니다" */
        description?: string
      },
    TData
  >,
) => {
  const queryKey = QUERY_KEY_INQUIRY_API_API.GET_MY_INQUIRY_LIST_INFINITE(
    params?.variables,
  )
  return useInfiniteQuery({
    queryKey,
    initialPageParam: null,
    queryFn: ({ pageParam }) => {
      return inquiryApiApi.getMyInquiryList({
        ...params?.variables,
        query: {
          ...params?.variables?.query,
          cursor: (pageParam as string) || undefined,
        },
      })
    },
    getNextPageParam: (lastPage) => {
      const cursor = lastPage?.data?.cursor ?? null
      return cursor
    },
    ...params?.options,
  })
}

/**
 * @description ## 1:1 문의 남기기
 *
 * @tags [Inquiry API]
 * @name AddInquiry
 * @summary 1:1 문의 남기기
 * @request POST:/v1/inquiry
 * @secure  */

export const useAddInquiryMutation = (
  params: MutationHookParams<
    typeof inquiryApiApi.addInquiry,
    {
      error:
        | ErrorResponseDTOCommonType
        | {
            /** @example "UNAUTHORIZED_ACCESS" */
            errorCode?: string
            /** @example "인증이 필요한 접근입니다" */
            description?: string
          }
        | {
            /** @example "ACCESS_DENIED" */
            errorCode?: string
            /** @example "접근이 거부되었습니다" */
            description?: string
          }
    }
  >,
) => {
  const mutationKey = QUERY_KEY_INQUIRY_API_API.ADD_INQUIRY()
  return useMutation({
    mutationKey,
    mutationFn: inquiryApiApi.addInquiry,
    ...params?.options,
  })
}

/**
 * !DO NOT EDIT THIS FILE
 *
 * 스크립트가 실행될때, 파일을 항상 새로 쓰기 때문에 파일 수정시 작성내용이 제거 될 수 있습니다.
 */

/**
 * !DO NOT EDIT THIS FILE
 *
 * 스크립트가 실행될때, 파일을 항상 새로 쓰기 때문에 파일 수정시 작성내용이 제거 될 수 있습니다.
 */

/**
 * tok-cli.config.ts 에서 설정된 instance 경로의 axios instace 가 적용된, api 의 instance 입니다.
 */
