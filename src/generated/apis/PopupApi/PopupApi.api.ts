import { ContentType, HttpClient, RequestParams } from '../@http-client'
import {
  AddPopupCommentRequestType,
  ErrorResponseDTOCommonType,
  GetPopupListParamsOrderEnumType,
  GetPopupListParamsStatusEnumType,
  ResponseDTOCursorPopupResponseDtoType,
  ResponseDTOGetPopupResponseDtoType,
  ResponseDTOPageResponseDTOPopupCommentInfoType,
  ResponseDTOVoidType,
} from '../@types/data-contracts'
import { DeepOmitReadOnly } from '../@types/util-types'

/**
 * !DO NOT EDIT THIS FILE
 *
 * 스크립트가 실행될때, 파일을 항상 새로 쓰기 때문에 파일 수정시 작성내용이 제거 될 수 있습니다.
 */

export class PopupApiApi<
  SecurityDataType = unknown,
> extends HttpClient<SecurityDataType> {
  /**
   * @description ## Popup 찜하기 등록 / 취소 - popupId : 팝업 아이디 - isFavorite : true - 등록 / flase 취소
   *
   * @tags [Popup API]
   * @name AddPopupFavorite
   * @summary Popup 찜하기 등록 / 취소
   * @request POST:/v1/popups/{popupId}/like
   * @secure
   */

  addPopupFavorite = (variables: {
    popupId: number
    query?: {
      /** @default true */
      isLike?: boolean
    }
    params?: RequestParams
  }) =>
    this.request<
      ResponseDTOVoidType,
      | ErrorResponseDTOCommonType
      | {
          /** @example "UNAUTHORIZED_ACCESS" */
          errorCode?: string
          /** @example "인증이 필요한 접근입니다" */
          description?: string
        }
      | {
          /** @example "ACCESS_DENIED" */
          errorCode?: string
          /** @example "접근이 거부되었습니다" */
          description?: string
        }
    >({
      path: `/v1/popups/${variables.popupId}/like`,
      method: 'POST',
      query: variables.query,
      secure: true,
      ...variables.params,
    }) /**
   * No description
   *
   * @tags [Popup API]
   * @name GetComments
   * @summary Popup 댓글 조회
   * @request GET:/v1/popups/{popupId}/comments
   * @secure
   */

  getComments = (variables: {
    popupId: number
    query?: {
      /**
       * @format int32
       * @default 0
       */
      page?: number
      /**
       * @format int32
       * @default 10
       */
      pageSize?: number
    }
    params?: RequestParams
  }) =>
    this.request<
      ResponseDTOPageResponseDTOPopupCommentInfoType,
      | ErrorResponseDTOCommonType
      | {
          /** @example "UNAUTHORIZED_ACCESS" */
          errorCode?: string
          /** @example "인증이 필요한 접근입니다" */
          description?: string
        }
      | {
          /** @example "ACCESS_DENIED" */
          errorCode?: string
          /** @example "접근이 거부되었습니다" */
          description?: string
        }
    >({
      path: `/v1/popups/${variables.popupId}/comments`,
      method: 'GET',
      query: variables.query,
      secure: true,
      ...variables.params,
    }) /**
   * No description
   *
   * @tags [Popup API]
   * @name AddComment
   * @summary Popup 댓글 작성
   * @request POST:/v1/popups/{popupId}/comments
   * @secure
   */

  addComment = (variables: {
    popupId: number
    data: DeepOmitReadOnly<AddPopupCommentRequestType>
    params?: RequestParams
  }) =>
    this.request<
      ResponseDTOVoidType,
      | ErrorResponseDTOCommonType
      | {
          /** @example "UNAUTHORIZED_ACCESS" */
          errorCode?: string
          /** @example "인증이 필요한 접근입니다" */
          description?: string
        }
      | {
          /** @example "ACCESS_DENIED" */
          errorCode?: string
          /** @example "접근이 거부되었습니다" */
          description?: string
        }
    >({
      path: `/v1/popups/${variables.popupId}/comments`,
      method: 'POST',
      body: variables.data,
      secure: true,
      type: ContentType.Json,
      ...variables.params,
    }) /**
   * @description ## Popup 전체 조회 - 전달 받은 categoryId와 filter 로 조회한 데이터를 전달 - categoryId를 전달하지 않으면 모든 카테고리의 popup 조회 - filter 기본 값 : RECENTLY
   *
   * @tags [Popup API]
   * @name GetPopupList
   * @summary Popup 전체 조회
   * @request GET:/v1/popups
   * @secure
   */

  getPopupList = (variables?: {
    query?: {
      cursor?: string
      /**
       * @format int32
       * @default 10
       */
      pageSize?: number
      /** @format int64 */
      category?: number
      /** @default "RECENTLY" */
      order?: GetPopupListParamsOrderEnumType
      /** @default "IN_PROGRESS" */
      status?: GetPopupListParamsStatusEnumType
    }
    params?: RequestParams
  }) =>
    this.request<
      ResponseDTOCursorPopupResponseDtoType,
      | ErrorResponseDTOCommonType
      | {
          /** @example "UNAUTHORIZED_ACCESS" */
          errorCode?: string
          /** @example "인증이 필요한 접근입니다" */
          description?: string
        }
      | {
          /** @example "ACCESS_DENIED" */
          errorCode?: string
          /** @example "접근이 거부되었습니다" */
          description?: string
        }
    >({
      path: `/v1/popups`,
      method: 'GET',
      query: variables?.query,
      secure: true,
      ...variables?.params,
    }) /**
   * No description
   *
   * @tags [Popup API]
   * @name GetPopup
   * @summary Popup 상세 조회
   * @request GET:/v1/popups/{popupId}
   * @secure
   */

  getPopup = (variables: { popupId: number; params?: RequestParams }) =>
    this.request<
      ResponseDTOGetPopupResponseDtoType,
      | ErrorResponseDTOCommonType
      | {
          /** @example "UNAUTHORIZED_ACCESS" */
          errorCode?: string
          /** @example "인증이 필요한 접근입니다" */
          description?: string
        }
      | {
          /** @example "ACCESS_DENIED" */
          errorCode?: string
          /** @example "접근이 거부되었습니다" */
          description?: string
        }
    >({
      path: `/v1/popups/${variables.popupId}`,
      method: 'GET',
      secure: true,
      ...variables.params,
    }) /**
   * @description ## Popup 댓글 삭제(자신 댓글만 가능) - 댓글 조회에서 isMime = true 인 댓글에만 요청 - 자신의 댓글이 아니어도 응답은 200 OK, 하지만 삭제처리 되지 않음. -> 프론트와 협의 후 변경 가능
   *
   * @tags [Popup API]
   * @name DeleteComment
   * @summary Popup 댓글 삭제(자신 댓글만 가능)
   * @request DELETE:/v1/popups/{popupId}/comments/{commentId}
   * @secure
   */

  deleteComment = (variables: {
    popupId: number
    commentId: number
    params?: RequestParams
  }) =>
    this.request<
      ResponseDTOVoidType,
      | ErrorResponseDTOCommonType
      | {
          /** @example "UNAUTHORIZED_ACCESS" */
          errorCode?: string
          /** @example "인증이 필요한 접근입니다" */
          description?: string
        }
      | {
          /** @example "ACCESS_DENIED" */
          errorCode?: string
          /** @example "접근이 거부되었습니다" */
          description?: string
        }
    >({
      path: `/v1/popups/${variables.popupId}/comments/${variables.commentId}`,
      method: 'DELETE',
      secure: true,
      ...variables.params,
    })
}

//
