import { ContentType, HttpClient, RequestParams } from '../@http-client'
import {
  AddCommentRequestType,
  ErrorResponseDTOCommonType,
  ResponseDTOCursorMagazineListInfoType,
  ResponseDTOMagazineDetailInfoType,
  ResponseDTOPageResponseDTOCommentInfoType,
  ResponseDTOVoidType,
} from '../@types/data-contracts'
import { DeepOmitReadOnly } from '../@types/util-types'

/**
 * !DO NOT EDIT THIS FILE
 *
 * 스크립트가 실행될때, 파일을 항상 새로 쓰기 때문에 파일 수정시 작성내용이 제거 될 수 있습니다.
 */

export class MagazineApiApi<
  SecurityDataType = unknown,
> extends HttpClient<SecurityDataType> {
  /**
   * @description ## Magazine 댓글 조회 - isMime = true 인 댓글에는 삭제버튼 노출
   *
   * @tags [Magazine API]
   * @name GetComments1
   * @summary Magazine 댓글 조회
   * @request GET:/v1/magazines/{magazineId}/comments
   * @secure
   */

  getComments1 = (variables: {
    magazineId: number
    query?: {
      /**
       * @format int32
       * @default 0
       */
      page?: number
      /**
       * @format int32
       * @default 10
       */
      pageSize?: number
    }
    params?: RequestParams
  }) =>
    this.request<
      ResponseDTOPageResponseDTOCommentInfoType,
      | ErrorResponseDTOCommonType
      | {
          /** @example "UNAUTHORIZED_ACCESS" */
          errorCode?: string
          /** @example "인증이 필요한 접근입니다" */
          description?: string
        }
      | {
          /** @example "ACCESS_DENIED" */
          errorCode?: string
          /** @example "접근이 거부되었습니다" */
          description?: string
        }
    >({
      path: `/v1/magazines/${variables.magazineId}/comments`,
      method: 'GET',
      query: variables.query,
      secure: true,
      ...variables.params,
    }) /**
   * No description
   *
   * @tags [Magazine API]
   * @name AddComment1
   * @summary Magazine 댓글 작성
   * @request POST:/v1/magazines/{magazineId}/comments
   * @secure
   */

  addComment1 = (variables: {
    magazineId: number
    data: DeepOmitReadOnly<AddCommentRequestType>
    params?: RequestParams
  }) =>
    this.request<
      ResponseDTOVoidType,
      | ErrorResponseDTOCommonType
      | {
          /** @example "UNAUTHORIZED_ACCESS" */
          errorCode?: string
          /** @example "인증이 필요한 접근입니다" */
          description?: string
        }
      | {
          /** @example "ACCESS_DENIED" */
          errorCode?: string
          /** @example "접근이 거부되었습니다" */
          description?: string
        }
    >({
      path: `/v1/magazines/${variables.magazineId}/comments`,
      method: 'POST',
      body: variables.data,
      secure: true,
      type: ContentType.Json,
      ...variables.params,
    }) /**
   * @description ## Magazine Tab 무한스크롤 조회 - 초기 조회 시에는 cursor = null로 요청하시고 그 다음 스크롤 부터 response의 cursor 사
   *
   * @tags [Magazine API]
   * @name GetMagazineList
   * @summary Magazine Tab 무한스크롤 조회
   * @request GET:/v1/magazines
   * @secure
   */

  getMagazineList = (variables?: {
    query?: {
      /**
       * @format int32
       * @default 10
       */
      pageSize?: number
      cursor?: string
      keyword?: string
    }
    params?: RequestParams
  }) =>
    this.request<
      ResponseDTOCursorMagazineListInfoType,
      | ErrorResponseDTOCommonType
      | {
          /** @example "UNAUTHORIZED_ACCESS" */
          errorCode?: string
          /** @example "인증이 필요한 접근입니다" */
          description?: string
        }
      | {
          /** @example "ACCESS_DENIED" */
          errorCode?: string
          /** @example "접근이 거부되었습니다" */
          description?: string
        }
    >({
      path: `/v1/magazines`,
      method: 'GET',
      query: variables?.query,
      secure: true,
      ...variables?.params,
    }) /**
   * @description ## Magazine 상세 조회 - 어떠한 이유로 접근 불가능하더라도 동일한 MAGAZINE_ACCESS_DENIED 예외 반환.
   *
   * @tags [Magazine API]
   * @name GetMagazineDetail
   * @summary Magazine 상세 조회
   * @request GET:/v1/magazines/{magazineId}
   * @secure
   */

  getMagazineDetail = (variables: {
    magazineId: number
    params?: RequestParams
  }) =>
    this.request<
      ResponseDTOMagazineDetailInfoType,
      | void
      | {
          /** @example "UNAUTHORIZED_ACCESS" */
          errorCode?: string
          /** @example "인증이 필요한 접근입니다" */
          description?: string
        }
      | {
          /** @example "ACCESS_DENIED" */
          errorCode?: string
          /** @example "접근이 거부되었습니다" */
          description?: string
        }
    >({
      path: `/v1/magazines/${variables.magazineId}`,
      method: 'GET',
      secure: true,
      ...variables.params,
    }) /**
   * @description ## Magazine 댓글 삭제(자신 댓글만 가능) - 댓글 조회에서 isMime = true 인 댓글에만 요청 - 자신의 댓글이 아니어도 응답은 200 OK, 하지만 삭제처리 되지 않음. -> 프론트와 협의 후 변경 가능
   *
   * @tags [Magazine API]
   * @name DeleteComment1
   * @summary Magazine 댓글 삭제(자신 댓글만 가능)
   * @request DELETE:/v1/magazines/{magazineId}/comments/{commentId}
   * @secure
   */

  deleteComment1 = (variables: {
    magazineId: number
    commentId: number
    params?: RequestParams
  }) =>
    this.request<
      ResponseDTOVoidType,
      | ErrorResponseDTOCommonType
      | {
          /** @example "UNAUTHORIZED_ACCESS" */
          errorCode?: string
          /** @example "인증이 필요한 접근입니다" */
          description?: string
        }
      | {
          /** @example "ACCESS_DENIED" */
          errorCode?: string
          /** @example "접근이 거부되었습니다" */
          description?: string
        }
    >({
      path: `/v1/magazines/${variables.magazineId}/comments/${variables.commentId}`,
      method: 'DELETE',
      secure: true,
      ...variables.params,
    })
}

//
