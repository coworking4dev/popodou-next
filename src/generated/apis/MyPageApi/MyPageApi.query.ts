/**
 * !DO NOT EDIT THIS FILE
 *
 * 스크립트가 실행될때, 파일을 항상 새로 쓰기 때문에 파일 수정시 작성내용이 제거 될 수 있습니다.
 */
/**
 * tok-cli.config.ts 에서 설정된 instance 경로의 axios instace 가 적용된, api 의 instance 입니다.
 */
import {
  InfiniteData,
  useInfiniteQuery,
  useMutation,
  useQuery,
} from '@tanstack/react-query'

import { fetchExtended } from '@/configs/fetch/fetch-extend'

import { ErrorResponseDTOCommonType } from '../@types/data-contracts'
import {
  InfiniteQueryHookParams,
  MutationHookParams,
  Parameter,
  QueryHookParams,
  RequestFnReturn,
} from '../@types/react-query-type'
import { MyPageApiApi } from './MyPageApi.api'

export const myPageApiApi = new MyPageApiApi({ customFetch: fetchExtended })

/**
 * query key 에 undefined 를 포함시키지 않기 위한 함수입니다.
 */
const isDefined = (v: unknown) => typeof v !== 'undefined'

/**
 * query-keys
 */

export const QUERY_KEY_MY_PAGE_API_API = {
  GET_MY_PAGE_PROFILE: (
    variables?: Parameter<typeof myPageApiApi.getMyPageProfile>,
  ) => ['GET_MY_PAGE_PROFILE', variables].filter(isDefined),
  UPDATE_MY_PAGE_PROFILE: () => ['UPDATE_MY_PAGE_PROFILE'],
  GET_MY_POPUP_LIKES: (
    variables?: Parameter<typeof myPageApiApi.getMyPopupLikes>,
  ) => ['GET_MY_POPUP_LIKES', variables].filter(isDefined),
  GET_MY_POPUP_LIKES_INFINITE: (
    variables?: Parameter<typeof myPageApiApi.getMyPopupLikes>,
  ) => ['GET_MY_POPUP_LIKES_INFINITE', variables].filter(isDefined),
  GET_MY_COMMUNITY_POSTS: (
    variables?: Parameter<typeof myPageApiApi.getMyCommunityPosts>,
  ) => ['GET_MY_COMMUNITY_POSTS', variables].filter(isDefined),
  GET_MY_COMMUNITY_POSTS_INFINITE: (
    variables?: Parameter<typeof myPageApiApi.getMyCommunityPosts>,
  ) => ['GET_MY_COMMUNITY_POSTS_INFINITE', variables].filter(isDefined),
}

/**
 * No description
 *
 * @tags [MyPage API]
 * @name GetMyPageProfile
 * @summary 마이페이지 > Profile 조회
 * @request GET:/v1/my/profile
 * @secure    */

export const useGetMyPageProfileQuery = <
  TData = RequestFnReturn<typeof myPageApiApi.getMyPageProfile>,
>(
  params?: QueryHookParams<
    typeof myPageApiApi.getMyPageProfile,
    {
      error:
        | ErrorResponseDTOCommonType
        | {
            /** @example "UNAUTHORIZED_ACCESS" */
            errorCode?: string
            /** @example "인증이 필요한 접근입니다" */
            description?: string
          }
        | {
            /** @example "ACCESS_DENIED" */
            errorCode?: string
            /** @example "접근이 거부되었습니다" */
            description?: string
          }
    },
    TData
  >,
) => {
  const queryKey = QUERY_KEY_MY_PAGE_API_API.GET_MY_PAGE_PROFILE(
    params?.variables,
  )
  return useQuery({
    queryKey,
    queryFn: () => myPageApiApi.getMyPageProfile(params?.variables),
    ...params?.options,
  })
}

/**
 * @description ## 마이페이지 > Profile 수정 - Response 에는 수정 적용 후 getMyPageProfile 데이터를 반환합니다. - 주소 필드 모두 미입력 시 addresInfo == null - Sns 필드 플랫폼 미선택 시 snsInfo == null
 *
 * @tags [MyPage API]
 * @name UpdateMyPageProfile
 * @summary 마이페이지 > Profile 수정
 * @request PUT:/v1/my/profile
 * @secure  */

export const useUpdateMyPageProfileMutation = (
  params: MutationHookParams<
    typeof myPageApiApi.updateMyPageProfile,
    {
      error:
        | ErrorResponseDTOCommonType
        | {
            /** @example "UNAUTHORIZED_ACCESS" */
            errorCode?: string
            /** @example "인증이 필요한 접근입니다" */
            description?: string
          }
        | {
            /** @example "ACCESS_DENIED" */
            errorCode?: string
            /** @example "접근이 거부되었습니다" */
            description?: string
          }
    }
  >,
) => {
  const mutationKey = QUERY_KEY_MY_PAGE_API_API.UPDATE_MY_PAGE_PROFILE()
  return useMutation({
    mutationKey,
    mutationFn: myPageApiApi.updateMyPageProfile,
    ...params?.options,
  })
}

/**
 * @description ## 마이페이지 > 찜한 팝업 내역 - 좋아요 최신순으로 정렬 ### cursor - null 인 경우, 가장 최신순으로 조회 - responseBody에서 nextCursor 를 확인하여 다음 조회 시 사용 (null 이면 더 이상 데이터 없다는 의미)
 *
 * @tags [MyPage API]
 * @name GetMyPopupLikes
 * @summary 마이페이지 > 찜한 팝업 내역
 * @request GET:/v1/my/popup-like
 * @secure    */

export const useGetMyPopupLikesQuery = <
  TData = RequestFnReturn<typeof myPageApiApi.getMyPopupLikes>,
>(
  params?: QueryHookParams<
    typeof myPageApiApi.getMyPopupLikes,
    {
      error:
        | ErrorResponseDTOCommonType
        | {
            /** @example "UNAUTHORIZED_ACCESS" */
            errorCode?: string
            /** @example "인증이 필요한 접근입니다" */
            description?: string
          }
        | {
            /** @example "ACCESS_DENIED" */
            errorCode?: string
            /** @example "접근이 거부되었습니다" */
            description?: string
          }
    },
    TData
  >,
) => {
  const queryKey = QUERY_KEY_MY_PAGE_API_API.GET_MY_POPUP_LIKES(
    params?.variables,
  )
  return useQuery({
    queryKey,
    queryFn: () => myPageApiApi.getMyPopupLikes(params?.variables),
    ...params?.options,
  })
}

/**
 * @description ## 마이페이지 > 찜한 팝업 내역 - 좋아요 최신순으로 정렬 ### cursor - null 인 경우, 가장 최신순으로 조회 - responseBody에서 nextCursor 를 확인하여 다음 조회 시 사용 (null 이면 더 이상 데이터 없다는 의미)    *      * @tags [MyPage API]
 * @name GetMyPopupLikes
 * @summary 마이페이지 > 찜한 팝업 내역
 * @request GET:/v1/my/popup-like
 * @secure    */

export const useGetMyPopupLikesInfiniteQuery = <
  TData = InfiniteData<
    RequestFnReturn<typeof myPageApiApi.getMyPopupLikes>,
    Parameter<typeof myPageApiApi.getMyPopupLikes>
  >,
>(
  params?: InfiniteQueryHookParams<
    typeof myPageApiApi.getMyPopupLikes,
    | ErrorResponseDTOCommonType
    | {
        /** @example "UNAUTHORIZED_ACCESS" */
        errorCode?: string
        /** @example "인증이 필요한 접근입니다" */
        description?: string
      }
    | {
        /** @example "ACCESS_DENIED" */
        errorCode?: string
        /** @example "접근이 거부되었습니다" */
        description?: string
      },
    TData
  >,
) => {
  const queryKey = QUERY_KEY_MY_PAGE_API_API.GET_MY_POPUP_LIKES_INFINITE(
    params?.variables,
  )
  return useInfiniteQuery({
    queryKey,
    initialPageParam: null,
    queryFn: ({ pageParam }) => {
      return myPageApiApi.getMyPopupLikes({
        ...params?.variables,
        query: { ...params?.variables?.query },
      })
    },
    getNextPageParam: (lastPage) => {
      const cursor = lastPage?.data?.cursor ?? null
      return cursor
    },
    ...params?.options,
  })
}

/**
 * @description ## 마이페이지 > Lounge 자유 게시글 작성 내역 - 작성 최신순
 *
 * @tags [MyPage API]
 * @name GetMyCommunityPosts
 * @summary 마이페이지 > Lounge 자유 게시글 작성 내역
 * @request GET:/v1/my/community-post
 * @secure    */

export const useGetMyCommunityPostsQuery = <
  TData = RequestFnReturn<typeof myPageApiApi.getMyCommunityPosts>,
>(
  params?: QueryHookParams<
    typeof myPageApiApi.getMyCommunityPosts,
    {
      error:
        | ErrorResponseDTOCommonType
        | {
            /** @example "UNAUTHORIZED_ACCESS" */
            errorCode?: string
            /** @example "인증이 필요한 접근입니다" */
            description?: string
          }
        | {
            /** @example "ACCESS_DENIED" */
            errorCode?: string
            /** @example "접근이 거부되었습니다" */
            description?: string
          }
    },
    TData
  >,
) => {
  const queryKey = QUERY_KEY_MY_PAGE_API_API.GET_MY_COMMUNITY_POSTS(
    params?.variables,
  )
  return useQuery({
    queryKey,
    queryFn: () => myPageApiApi.getMyCommunityPosts(params?.variables),
    ...params?.options,
  })
}

/**
 * @description ## 마이페이지 > Lounge 자유 게시글 작성 내역 - 작성 최신순    *      * @tags [MyPage API]
 * @name GetMyCommunityPosts
 * @summary 마이페이지 > Lounge 자유 게시글 작성 내역
 * @request GET:/v1/my/community-post
 * @secure    */

export const useGetMyCommunityPostsInfiniteQuery = <
  TData = InfiniteData<
    RequestFnReturn<typeof myPageApiApi.getMyCommunityPosts>,
    Parameter<typeof myPageApiApi.getMyCommunityPosts>
  >,
>(
  params?: InfiniteQueryHookParams<
    typeof myPageApiApi.getMyCommunityPosts,
    | ErrorResponseDTOCommonType
    | {
        /** @example "UNAUTHORIZED_ACCESS" */
        errorCode?: string
        /** @example "인증이 필요한 접근입니다" */
        description?: string
      }
    | {
        /** @example "ACCESS_DENIED" */
        errorCode?: string
        /** @example "접근이 거부되었습니다" */
        description?: string
      },
    TData
  >,
) => {
  const queryKey = QUERY_KEY_MY_PAGE_API_API.GET_MY_COMMUNITY_POSTS_INFINITE(
    params?.variables,
  )
  return useInfiniteQuery({
    queryKey,
    initialPageParam: null,
    queryFn: ({ pageParam }) => {
      return myPageApiApi.getMyCommunityPosts({
        ...params?.variables,
        query: {
          ...params?.variables?.query,
          cursor: (pageParam as string) || undefined,
        },
      })
    },
    getNextPageParam: (lastPage) => {
      const cursor = lastPage?.data?.cursor ?? null
      return cursor
    },
    ...params?.options,
  })
}

/**
 * !DO NOT EDIT THIS FILE
 *
 * 스크립트가 실행될때, 파일을 항상 새로 쓰기 때문에 파일 수정시 작성내용이 제거 될 수 있습니다.
 */

/**
 * !DO NOT EDIT THIS FILE
 *
 * 스크립트가 실행될때, 파일을 항상 새로 쓰기 때문에 파일 수정시 작성내용이 제거 될 수 있습니다.
 */

/**
 * tok-cli.config.ts 에서 설정된 instance 경로의 axios instace 가 적용된, api 의 instance 입니다.
 */
