/**
 * !DO NOT EDIT THIS FILE
 *
 * 스크립트가 실행될때, 파일을 항상 새로 쓰기 때문에 파일 수정시 작성내용이 제거 될 수 있습니다.
 */
/**
 * tok-cli.config.ts 에서 설정된 instance 경로의 axios instace 가 적용된, api 의 instance 입니다.
 */
import { InfiniteData, useInfiniteQuery, useQuery } from '@tanstack/react-query'

import { fetchExtended } from '@/configs/fetch/fetch-extend'

import { ErrorResponseDTOCommonType } from '../@types/data-contracts'
import {
  InfiniteQueryHookParams,
  Parameter,
  QueryHookParams,
  RequestFnReturn,
} from '../@types/react-query-type'
import { PlaceApiApi } from './PlaceApi.api'

export const placeApiApi = new PlaceApiApi({ customFetch: fetchExtended })

/**
 * query key 에 undefined 를 포함시키지 않기 위한 함수입니다.
 */
const isDefined = (v: unknown) => typeof v !== 'undefined'

/**
 * query-keys
 */

export const QUERY_KEY_PLACE_API_API = {
  GET_PLACE_LIST: (variables?: Parameter<typeof placeApiApi.getPlaceList>) =>
    ['GET_PLACE_LIST', variables].filter(isDefined),
  GET_PLACE_LIST_INFINITE: (
    variables?: Parameter<typeof placeApiApi.getPlaceList>,
  ) => ['GET_PLACE_LIST_INFINITE', variables].filter(isDefined),
  GET_PLACE_DETAIL: (
    variables?: Parameter<typeof placeApiApi.getPlaceDetail>,
  ) => ['GET_PLACE_DETAIL', variables].filter(isDefined),
}

/**
 * @description ## 공간 전체 조회 - 전달 받은 categoryId 로 조회한 데이터를 전달 - categoryId를 전달하지 않으면 모든 카테고리의 place 조회
 *
 * @tags [Place API]
 * @name GetPlaceList
 * @summary 공간 전체 조회
 * @request GET:/v1/place
 * @secure    */

export const useGetPlaceListQuery = <
  TData = RequestFnReturn<typeof placeApiApi.getPlaceList>,
>(
  params?: QueryHookParams<
    typeof placeApiApi.getPlaceList,
    {
      error:
        | ErrorResponseDTOCommonType
        | {
            /** @example "UNAUTHORIZED_ACCESS" */
            errorCode?: string
            /** @example "인증이 필요한 접근입니다" */
            description?: string
          }
        | {
            /** @example "ACCESS_DENIED" */
            errorCode?: string
            /** @example "접근이 거부되었습니다" */
            description?: string
          }
    },
    TData
  >,
) => {
  const queryKey = QUERY_KEY_PLACE_API_API.GET_PLACE_LIST(params?.variables)
  return useQuery({
    queryKey,
    queryFn: () => placeApiApi.getPlaceList(params?.variables),
    ...params?.options,
  })
}

/**
 * @description ## 공간 전체 조회 - 전달 받은 categoryId 로 조회한 데이터를 전달 - categoryId를 전달하지 않으면 모든 카테고리의 place 조회    *      * @tags [Place API]
 * @name GetPlaceList
 * @summary 공간 전체 조회
 * @request GET:/v1/place
 * @secure    */

export const useGetPlaceListInfiniteQuery = <
  TData = InfiniteData<
    RequestFnReturn<typeof placeApiApi.getPlaceList>,
    Parameter<typeof placeApiApi.getPlaceList>
  >,
>(
  params?: InfiniteQueryHookParams<
    typeof placeApiApi.getPlaceList,
    | ErrorResponseDTOCommonType
    | {
        /** @example "UNAUTHORIZED_ACCESS" */
        errorCode?: string
        /** @example "인증이 필요한 접근입니다" */
        description?: string
      }
    | {
        /** @example "ACCESS_DENIED" */
        errorCode?: string
        /** @example "접근이 거부되었습니다" */
        description?: string
      },
    TData
  >,
) => {
  const queryKey = QUERY_KEY_PLACE_API_API.GET_PLACE_LIST_INFINITE(
    params?.variables,
  )
  return useInfiniteQuery({
    queryKey,
    initialPageParam: null,
    queryFn: ({ pageParam }) => {
      return placeApiApi.getPlaceList({
        ...params?.variables,
        query: {
          ...params?.variables?.query,
          cursor: (pageParam as string) ?? undefined,
        },
      })
    },
    getNextPageParam: (lastPage) => {
      const cursor = lastPage?.data?.cursor ?? null
      return cursor
    },
    ...params?.options,
  })
}

/**
 * @description ## 공간 상세 조회
 *
 * @tags [Place API]
 * @name GetPlaceDetail
 * @summary 공간 상세 조회
 * @request GET:/v1/place/{placeId}
 * @secure    */

export const useGetPlaceDetailQuery = <
  TData = RequestFnReturn<typeof placeApiApi.getPlaceDetail>,
>(
  params: QueryHookParams<
    typeof placeApiApi.getPlaceDetail,
    {
      error:
        | ErrorResponseDTOCommonType
        | {
            /** @example "UNAUTHORIZED_ACCESS" */
            errorCode?: string
            /** @example "인증이 필요한 접근입니다" */
            description?: string
          }
        | {
            /** @example "ACCESS_DENIED" */
            errorCode?: string
            /** @example "접근이 거부되었습니다" */
            description?: string
          }
    },
    TData
  >,
) => {
  const queryKey = QUERY_KEY_PLACE_API_API.GET_PLACE_DETAIL(params.variables)
  return useQuery({
    queryKey,
    queryFn: () => placeApiApi.getPlaceDetail(params.variables),
    ...params?.options,
  })
}

/**
 * !DO NOT EDIT THIS FILE
 *
 * 스크립트가 실행될때, 파일을 항상 새로 쓰기 때문에 파일 수정시 작성내용이 제거 될 수 있습니다.
 */

/**
 * !DO NOT EDIT THIS FILE
 *
 * 스크립트가 실행될때, 파일을 항상 새로 쓰기 때문에 파일 수정시 작성내용이 제거 될 수 있습니다.
 */

/**
 * tok-cli.config.ts 에서 설정된 instance 경로의 axios instace 가 적용된, api 의 instance 입니다.
 */
