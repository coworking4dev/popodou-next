/**
 * !DO NOT EDIT THIS FILE
 *
 * 스크립트가 실행될때, 파일을 항상 새로 쓰기 때문에 파일 수정시 작성내용이 제거 될 수 있습니다.
 */
/**
 * tok-cli.config.ts 에서 설정된 instance 경로의 axios instace 가 적용된, api 의 instance 입니다.
 */
import {
  InfiniteData,
  useInfiniteQuery,
  useMutation,
  useQuery,
} from '@tanstack/react-query'

import { fetchExtended } from '@/configs/fetch/fetch-extend'

import { ErrorResponseDTOCommonType } from '../@types/data-contracts'
import {
  InfiniteQueryHookParams,
  MutationHookParams,
  Parameter,
  QueryHookParams,
  RequestFnReturn,
} from '../@types/react-query-type'
import { PopupApiApi } from './PopupApi.api'

export const popupApiApi = new PopupApiApi({ customFetch: fetchExtended })

/**
 * query key 에 undefined 를 포함시키지 않기 위한 함수입니다.
 */
const isDefined = (v: unknown) => typeof v !== 'undefined'

/**
 * query-keys
 */

export const QUERY_KEY_POPUP_API_API = {
  ADD_POPUP_FAVORITE: () => ['ADD_POPUP_FAVORITE'],
  GET_COMMENTS: (variables?: Parameter<typeof popupApiApi.getComments>) =>
    ['GET_COMMENTS', variables].filter(isDefined),
  ADD_COMMENT: () => ['ADD_COMMENT'],
  GET_POPUP_LIST: (variables?: Parameter<typeof popupApiApi.getPopupList>) =>
    ['GET_POPUP_LIST', variables].filter(isDefined),
  GET_POPUP_LIST_INFINITE: (
    variables?: Parameter<typeof popupApiApi.getPopupList>,
  ) => ['GET_POPUP_LIST_INFINITE', variables].filter(isDefined),
  GET_POPUP: (variables?: Parameter<typeof popupApiApi.getPopup>) =>
    ['GET_POPUP', variables].filter(isDefined),
  DELETE_COMMENT: () => ['DELETE_COMMENT'],
}

/**
 * @description ## Popup 찜하기 등록 / 취소 - popupId : 팝업 아이디 - isFavorite : true - 등록 / flase 취소
 *
 * @tags [Popup API]
 * @name AddPopupFavorite
 * @summary Popup 찜하기 등록 / 취소
 * @request POST:/v1/popups/{popupId}/like
 * @secure  */

export const useAddPopupFavoriteMutation = (
  params: MutationHookParams<
    typeof popupApiApi.addPopupFavorite,
    {
      error:
        | ErrorResponseDTOCommonType
        | {
            /** @example "UNAUTHORIZED_ACCESS" */
            errorCode?: string
            /** @example "인증이 필요한 접근입니다" */
            description?: string
          }
        | {
            /** @example "ACCESS_DENIED" */
            errorCode?: string
            /** @example "접근이 거부되었습니다" */
            description?: string
          }
    }
  >,
) => {
  const mutationKey = QUERY_KEY_POPUP_API_API.ADD_POPUP_FAVORITE()
  return useMutation({
    mutationKey,
    mutationFn: popupApiApi.addPopupFavorite,
    ...params?.options,
  })
}

/**
 * No description
 *
 * @tags [Popup API]
 * @name GetComments
 * @summary Popup 댓글 조회
 * @request GET:/v1/popups/{popupId}/comments
 * @secure    */

export const useGetCommentsQuery = <
  TData = RequestFnReturn<typeof popupApiApi.getComments>,
>(
  params: QueryHookParams<
    typeof popupApiApi.getComments,
    {
      error:
        | ErrorResponseDTOCommonType
        | {
            /** @example "UNAUTHORIZED_ACCESS" */
            errorCode?: string
            /** @example "인증이 필요한 접근입니다" */
            description?: string
          }
        | {
            /** @example "ACCESS_DENIED" */
            errorCode?: string
            /** @example "접근이 거부되었습니다" */
            description?: string
          }
    },
    TData
  >,
) => {
  const queryKey = QUERY_KEY_POPUP_API_API.GET_COMMENTS(params.variables)
  return useQuery({
    queryKey,
    queryFn: () => popupApiApi.getComments(params.variables),
    ...params?.options,
  })
}

/**
 * No description
 *
 * @tags [Popup API]
 * @name AddComment
 * @summary Popup 댓글 작성
 * @request POST:/v1/popups/{popupId}/comments
 * @secure  */

export const useAddCommentMutation = (
  params: MutationHookParams<
    typeof popupApiApi.addComment,
    {
      error:
        | ErrorResponseDTOCommonType
        | {
            /** @example "UNAUTHORIZED_ACCESS" */
            errorCode?: string
            /** @example "인증이 필요한 접근입니다" */
            description?: string
          }
        | {
            /** @example "ACCESS_DENIED" */
            errorCode?: string
            /** @example "접근이 거부되었습니다" */
            description?: string
          }
    }
  >,
) => {
  const mutationKey = QUERY_KEY_POPUP_API_API.ADD_COMMENT()
  return useMutation({
    mutationKey,
    mutationFn: popupApiApi.addComment,
    ...params?.options,
  })
}

/**
 * @description ## Popup 전체 조회 - 전달 받은 categoryId와 filter 로 조회한 데이터를 전달 - categoryId를 전달하지 않으면 모든 카테고리의 popup 조회 - filter 기본 값 : RECENTLY
 *
 * @tags [Popup API]
 * @name GetPopupList
 * @summary Popup 전체 조회
 * @request GET:/v1/popups
 * @secure    */

export const useGetPopupListQuery = <
  TData = RequestFnReturn<typeof popupApiApi.getPopupList>,
>(
  params?: QueryHookParams<
    typeof popupApiApi.getPopupList,
    {
      error:
        | ErrorResponseDTOCommonType
        | {
            /** @example "UNAUTHORIZED_ACCESS" */
            errorCode?: string
            /** @example "인증이 필요한 접근입니다" */
            description?: string
          }
        | {
            /** @example "ACCESS_DENIED" */
            errorCode?: string
            /** @example "접근이 거부되었습니다" */
            description?: string
          }
    },
    TData
  >,
) => {
  const queryKey = QUERY_KEY_POPUP_API_API.GET_POPUP_LIST(params?.variables)
  return useQuery({
    queryKey,
    queryFn: () => popupApiApi.getPopupList(params?.variables),
    ...params?.options,
  })
}

/**
 * @description ## Popup 전체 조회 - 전달 받은 categoryId와 filter 로 조회한 데이터를 전달 - categoryId를 전달하지 않으면 모든 카테고리의 popup 조회 - filter 기본 값 : RECENTLY    *      * @tags [Popup API]
 * @name GetPopupList
 * @summary Popup 전체 조회
 * @request GET:/v1/popups
 * @secure    */

export const useGetPopupListInfiniteQuery = <
  TData = InfiniteData<
    RequestFnReturn<typeof popupApiApi.getPopupList>,
    Parameter<typeof popupApiApi.getPopupList>
  >,
>(
  params?: InfiniteQueryHookParams<
    typeof popupApiApi.getPopupList,
    | ErrorResponseDTOCommonType
    | {
        /** @example "UNAUTHORIZED_ACCESS" */
        errorCode?: string
        /** @example "인증이 필요한 접근입니다" */
        description?: string
      }
    | {
        /** @example "ACCESS_DENIED" */
        errorCode?: string
        /** @example "접근이 거부되었습니다" */
        description?: string
      },
    TData
  >,
) => {
  const queryKey = QUERY_KEY_POPUP_API_API.GET_POPUP_LIST_INFINITE(
    params?.variables,
  )
  return useInfiniteQuery({
    queryKey,
    initialPageParam: null,
    queryFn: ({ pageParam }) => {
      return popupApiApi.getPopupList({
        ...params?.variables,
        query: {
          ...params?.variables?.query,
          cursor: (pageParam as string) ?? undefined,
        },
      })
    },
    getNextPageParam: (lastPage) => {
      const cursor = lastPage?.data?.cursor ?? null
      return cursor
    },
    ...params?.options,
  })
}

/**
 * No description
 *
 * @tags [Popup API]
 * @name GetPopup
 * @summary Popup 상세 조회
 * @request GET:/v1/popups/{popupId}
 * @secure    */

export const useGetPopupQuery = <
  TData = RequestFnReturn<typeof popupApiApi.getPopup>,
>(
  params: QueryHookParams<
    typeof popupApiApi.getPopup,
    {
      error:
        | ErrorResponseDTOCommonType
        | {
            /** @example "UNAUTHORIZED_ACCESS" */
            errorCode?: string
            /** @example "인증이 필요한 접근입니다" */
            description?: string
          }
        | {
            /** @example "ACCESS_DENIED" */
            errorCode?: string
            /** @example "접근이 거부되었습니다" */
            description?: string
          }
    },
    TData
  >,
) => {
  const queryKey = QUERY_KEY_POPUP_API_API.GET_POPUP(params.variables)
  return useQuery({
    queryKey,
    queryFn: () => popupApiApi.getPopup(params.variables),
    ...params?.options,
  })
}

/**
 * @description ## Popup 댓글 삭제(자신 댓글만 가능) - 댓글 조회에서 isMime = true 인 댓글에만 요청 - 자신의 댓글이 아니어도 응답은 200 OK, 하지만 삭제처리 되지 않음. -> 프론트와 협의 후 변경 가능
 *
 * @tags [Popup API]
 * @name DeleteComment
 * @summary Popup 댓글 삭제(자신 댓글만 가능)
 * @request DELETE:/v1/popups/{popupId}/comments/{commentId}
 * @secure  */

export const useDeleteCommentMutation = (
  params: MutationHookParams<
    typeof popupApiApi.deleteComment,
    {
      error:
        | ErrorResponseDTOCommonType
        | {
            /** @example "UNAUTHORIZED_ACCESS" */
            errorCode?: string
            /** @example "인증이 필요한 접근입니다" */
            description?: string
          }
        | {
            /** @example "ACCESS_DENIED" */
            errorCode?: string
            /** @example "접근이 거부되었습니다" */
            description?: string
          }
    }
  >,
) => {
  const mutationKey = QUERY_KEY_POPUP_API_API.DELETE_COMMENT()
  return useMutation({
    mutationKey,
    mutationFn: popupApiApi.deleteComment,
    ...params?.options,
  })
}

/**
 * !DO NOT EDIT THIS FILE
 *
 * 스크립트가 실행될때, 파일을 항상 새로 쓰기 때문에 파일 수정시 작성내용이 제거 될 수 있습니다.
 */

/**
 * !DO NOT EDIT THIS FILE
 *
 * 스크립트가 실행될때, 파일을 항상 새로 쓰기 때문에 파일 수정시 작성내용이 제거 될 수 있습니다.
 */

/**
 * tok-cli.config.ts 에서 설정된 instance 경로의 axios instace 가 적용된, api 의 instance 입니다.
 */
