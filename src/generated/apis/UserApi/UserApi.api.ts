import { ContentType, HttpClient, RequestParams } from '../@http-client'
import {
  DeleteUserRequestType,
  ErrorResponseDTOCommonType,
  LoginRequestDtoType,
  PasswordChangeRequestDtoType,
  PasswordResetConfirmRequestType,
  RegisterSocialUserRequestDtoType,
  RegisterUserRequestDtoType,
  ResponseDTOLoginResponseDtoType,
  ResponseDTORegisterUserResponseDtoType,
  ResponseDTOStringType,
  ResponseDTOUserRefreshResponseDtoType,
  ResponseDTOVoidType,
  UserRefreshRequestDtoType,
} from '../@types/data-contracts'
import { DeepOmitReadOnly } from '../@types/util-types'

/**
 * !DO NOT EDIT THIS FILE
 *
 * 스크립트가 실행될때, 파일을 항상 새로 쓰기 때문에 파일 수정시 작성내용이 제거 될 수 있습니다.
 */

export class UserApiApi<
  SecurityDataType = unknown,
> extends HttpClient<SecurityDataType> {
  /**
   * No description
   *
   * @tags [User API]
   * @name RegisterUser
   * @summary 자체 회원가입
   * @request POST:/v1/user/register
   * @secure
   */

  registerUser = (variables: {
    data: DeepOmitReadOnly<RegisterUserRequestDtoType>
    params?: RequestParams
  }) =>
    this.request<
      ResponseDTORegisterUserResponseDtoType,
      | void
      | {
          /** @example "UNAUTHORIZED_ACCESS" */
          errorCode?: string
          /** @example "인증이 필요한 접근입니다" */
          description?: string
        }
      | {
          /** @example "ACCESS_DENIED" */
          errorCode?: string
          /** @example "접근이 거부되었습니다" */
          description?: string
        }
    >({
      path: `/v1/user/register`,
      method: 'POST',
      body: variables.data,
      secure: true,
      type: ContentType.Json,
      ...variables.params,
    }) /**
   * No description
   *
   * @tags [User API]
   * @name RegisterSocialUser
   * @summary 소셜 회원가입
   * @request POST:/v1/user/register-oauth2
   * @secure
   */

  registerSocialUser = (variables: {
    data: DeepOmitReadOnly<RegisterSocialUserRequestDtoType>
    params?: RequestParams
  }) =>
    this.request<
      ResponseDTOLoginResponseDtoType,
      | void
      | {
          /** @example "UNAUTHORIZED_ACCESS" */
          errorCode?: string
          /** @example "인증이 필요한 접근입니다" */
          description?: string
        }
      | {
          /** @example "ACCESS_DENIED" */
          errorCode?: string
          /** @example "접근이 거부되었습니다" */
          description?: string
        }
    >({
      path: `/v1/user/register-oauth2`,
      method: 'POST',
      body: variables.data,
      secure: true,
      type: ContentType.Json,
      ...variables.params,
    }) /**
   * No description
   *
   * @tags [User API]
   * @name UserRefresh
   * @summary 유저 리프레시
   * @request POST:/v1/user/refresh
   * @secure
   */

  userRefresh = (variables: {
    data: DeepOmitReadOnly<UserRefreshRequestDtoType>
    params?: RequestParams
  }) =>
    this.request<
      ResponseDTOUserRefreshResponseDtoType,
      | ErrorResponseDTOCommonType
      | {
          /** @example "UNAUTHORIZED_ACCESS" */
          errorCode?: string
          /** @example "인증이 필요한 접근입니다" */
          description?: string
        }
      | {
          /** @example "ACCESS_DENIED" */
          errorCode?: string
          /** @example "접근이 거부되었습니다" */
          description?: string
        }
    >({
      path: `/v1/user/refresh`,
      method: 'POST',
      body: variables.data,
      secure: true,
      type: ContentType.Json,
      ...variables.params,
    }) /**
   * No description
   *
   * @tags [User API]
   * @name PasswordResetConfirm
   * @summary 유저 비밀번호 초기화
   * @request POST:/v1/user/password-reset
   * @secure
   */

  passwordResetConfirm = (variables: {
    data: DeepOmitReadOnly<PasswordResetConfirmRequestType>
    params?: RequestParams
  }) =>
    this.request<
      ResponseDTOVoidType,
      | void
      | {
          /** @example "UNAUTHORIZED_ACCESS" */
          errorCode?: string
          /** @example "인증이 필요한 접근입니다" */
          description?: string
        }
      | {
          /** @example "ACCESS_DENIED" */
          errorCode?: string
          /** @example "접근이 거부되었습니다" */
          description?: string
        }
    >({
      path: `/v1/user/password-reset`,
      method: 'POST',
      body: variables.data,
      secure: true,
      type: ContentType.Json,
      ...variables.params,
    }) /**
   * No description
   *
   * @tags [User API]
   * @name ChangePassword
   * @summary 유저 비밀번호 변경
   * @request POST:/v1/user/password-change
   * @secure
   */

  changePassword = (variables: {
    data: DeepOmitReadOnly<PasswordChangeRequestDtoType>
    params?: RequestParams
  }) =>
    this.request<
      ResponseDTOStringType,
      | void
      | {
          /** @example "UNAUTHORIZED_ACCESS" */
          errorCode?: string
          /** @example "인증이 필요한 접근입니다" */
          description?: string
        }
      | {
          /** @example "ACCESS_DENIED" */
          errorCode?: string
          /** @example "접근이 거부되었습니다" */
          description?: string
        }
    >({
      path: `/v1/user/password-change`,
      method: 'POST',
      body: variables.data,
      secure: true,
      type: ContentType.Json,
      ...variables.params,
    }) /**
   * No description
   *
   * @tags [User API]
   * @name Login
   * @summary 시스템 로그인
   * @request POST:/v1/user/login
   * @secure
   */

  login = (variables: {
    data: DeepOmitReadOnly<LoginRequestDtoType>
    params?: RequestParams
  }) =>
    this.request<
      ResponseDTOLoginResponseDtoType,
      | void
      | {
          /** @example "UNAUTHORIZED_ACCESS" */
          errorCode?: string
          /** @example "인증이 필요한 접근입니다" */
          description?: string
        }
      | {
          /** @example "ACCESS_DENIED" */
          errorCode?: string
          /** @example "접근이 거부되었습니다" */
          description?: string
        }
    >({
      path: `/v1/user/login`,
      method: 'POST',
      body: variables.data,
      secure: true,
      type: ContentType.Json,
      ...variables.params,
    }) /**
   * @description ## 회원 탈퇴 - id는 me로 요청
   *
   * @tags [User API]
   * @name DeleteUser
   * @summary 회원 탈퇴
   * @request DELETE:/v1/user/{id}
   * @secure
   */

  deleteUser = (variables: {
    id: string
    data: DeepOmitReadOnly<DeleteUserRequestType>
    params?: RequestParams
  }) =>
    this.request<
      ResponseDTOVoidType,
      | ErrorResponseDTOCommonType
      | {
          /** @example "UNAUTHORIZED_ACCESS" */
          errorCode?: string
          /** @example "인증이 필요한 접근입니다" */
          description?: string
        }
      | {
          /** @example "ACCESS_DENIED" */
          errorCode?: string
          /** @example "접근이 거부되었습니다" */
          description?: string
        }
      | void
    >({
      path: `/v1/user/${variables.id}`,
      method: 'DELETE',
      body: variables.data,
      secure: true,
      type: ContentType.Json,
      ...variables.params,
    })
}

//
