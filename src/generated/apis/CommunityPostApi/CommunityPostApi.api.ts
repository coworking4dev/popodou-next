import { ContentType, HttpClient, RequestParams } from '../@http-client'
import {
  AddCommunityPostsRequestDtoType,
  AddPostCommentsRequestDtoType,
  ErrorResponseDTOCommonType,
  ReportCommunityPostRequestDtoType,
  ResponseDTOGetCommunityPostResponseDtoType,
  ResponseDTOPageResponseDTOGetPostCommentsResponseDtoType,
  ResponseDTOVoidType,
} from '../@types/data-contracts'
import { DeepOmitReadOnly } from '../@types/util-types'

/**
 * !DO NOT EDIT THIS FILE
 *
 * 스크립트가 실행될때, 파일을 항상 새로 쓰기 때문에 파일 수정시 작성내용이 제거 될 수 있습니다.
 */

export class CommunityPostApiApi<
  SecurityDataType = unknown,
> extends HttpClient<SecurityDataType> {
  /**
   * @description ## Lounge Community-post 글쓰기 - 로그인한 유저는 글을 작성할 수 있습니다 - content 는 필수 값입니다 - 이미지는 최대 10개까지 등록할 수 있습니다
   *
   * @tags [Community Post API]
   * @name AddCommunityPosts
   * @summary Lounge Community-post 글쓰기
   * @request POST:/v1/community-post
   * @secure
   */

  addCommunityPosts = (variables: {
    data: DeepOmitReadOnly<AddCommunityPostsRequestDtoType>
    params?: RequestParams
  }) =>
    this.request<
      ResponseDTOVoidType,
      | ErrorResponseDTOCommonType
      | {
          /** @example "UNAUTHORIZED_ACCESS" */
          errorCode?: string
          /** @example "인증이 필요한 접근입니다" */
          description?: string
        }
      | {
          /** @example "ACCESS_DENIED" */
          errorCode?: string
          /** @example "접근이 거부되었습니다" */
          description?: string
        }
      | void
    >({
      path: `/v1/community-post`,
      method: 'POST',
      body: variables.data,
      secure: true,
      type: ContentType.Json,
      ...variables.params,
    }) /**
   * @description ## Lounge 게시글 좋아요 등록 / 취소 - postId : 게시글 아이디 - isLike : true - 등록 / false - 취소
   *
   * @tags [Community Post API]
   * @name AddCommunityPostsLike
   * @summary Lounge 게시글 좋아요 등록 / 취소
   * @request POST:/v1/community-post/{postId}/like
   * @secure
   */

  addCommunityPostsLike = (variables: {
    postId: number
    query?: {
      /** @default true */
      isLike?: boolean
    }
    params?: RequestParams
  }) =>
    this.request<
      ResponseDTOVoidType,
      | void
      | {
          /** @example "UNAUTHORIZED_ACCESS" */
          errorCode?: string
          /** @example "인증이 필요한 접근입니다" */
          description?: string
        }
      | {
          /** @example "ACCESS_DENIED" */
          errorCode?: string
          /** @example "접근이 거부되었습니다" */
          description?: string
        }
    >({
      path: `/v1/community-post/${variables.postId}/like`,
      method: 'POST',
      query: variables.query,
      secure: true,
      ...variables.params,
    }) /**
   * @description ## Lounge 게시글 댓글 조회 - 정렬 : 최신순
   *
   * @tags [Community Post API]
   * @name GetCommunityPostsComments
   * @summary Lounge 게시글 댓글 조회
   * @request GET:/v1/community-post/{postId}/comments
   * @secure
   */

  getCommunityPostsComments = (variables: {
    postId: number
    query?: {
      /**
       * @format int32
       * @default 0
       */
      page?: number
      /**
       * @format int32
       * @default 10
       */
      pageSize?: number
    }
    params?: RequestParams
  }) =>
    this.request<
      ResponseDTOPageResponseDTOGetPostCommentsResponseDtoType,
      | ErrorResponseDTOCommonType
      | {
          /** @example "UNAUTHORIZED_ACCESS" */
          errorCode?: string
          /** @example "인증이 필요한 접근입니다" */
          description?: string
        }
      | {
          /** @example "ACCESS_DENIED" */
          errorCode?: string
          /** @example "접근이 거부되었습니다" */
          description?: string
        }
    >({
      path: `/v1/community-post/${variables.postId}/comments`,
      method: 'GET',
      query: variables.query,
      secure: true,
      ...variables.params,
    }) /**
   * @description ## Lounge 게시글 댓글 등록 - 댓글은 공백을 제외하고 한 글자 이상이어야 합니다
   *
   * @tags [Community Post API]
   * @name AddCommunityPostsComments
   * @summary Lounge 게시글 댓글 등록
   * @request POST:/v1/community-post/{postId}/comments
   * @secure
   */

  addCommunityPostsComments = (variables: {
    postId: number
    data: DeepOmitReadOnly<AddPostCommentsRequestDtoType>
    params?: RequestParams
  }) =>
    this.request<
      ResponseDTOVoidType,
      | ErrorResponseDTOCommonType
      | {
          /** @example "UNAUTHORIZED_ACCESS" */
          errorCode?: string
          /** @example "인증이 필요한 접근입니다" */
          description?: string
        }
      | {
          /** @example "ACCESS_DENIED" */
          errorCode?: string
          /** @example "접근이 거부되었습니다" */
          description?: string
        }
    >({
      path: `/v1/community-post/${variables.postId}/comments`,
      method: 'POST',
      body: variables.data,
      secure: true,
      type: ContentType.Json,
      ...variables.params,
    }) /**
   * @description ## Lounge 게시글 신고 - 유저당 한 게시글은 1회 신고만 가능
   *
   * @tags [Community Post API]
   * @name ReportCommunityPosts
   * @summary Lounge 게시글 신고
   * @request POST:/v1/community-post/report
   * @secure
   */

  reportCommunityPosts = (variables: {
    data: DeepOmitReadOnly<ReportCommunityPostRequestDtoType>
    params?: RequestParams
  }) =>
    this.request<
      ResponseDTOVoidType,
      | ErrorResponseDTOCommonType
      | {
          /** @example "UNAUTHORIZED_ACCESS" */
          errorCode?: string
          /** @example "인증이 필요한 접근입니다" */
          description?: string
        }
      | {
          /** @example "ACCESS_DENIED" */
          errorCode?: string
          /** @example "접근이 거부되었습니다" */
          description?: string
        }
    >({
      path: `/v1/community-post/report`,
      method: 'POST',
      body: variables.data,
      secure: true,
      type: ContentType.Json,
      ...variables.params,
    }) /**
   * @description ## Lounge Community-post 조회 - 전달받은 community-post id 값에 해당하는 게시글을 조회하여 전달합니다
   *
   * @tags [Community Post API]
   * @name GetCommunityPosts
   * @summary Lounge Community-post 상세 조회
   * @request GET:/v1/community-post/{postId}
   * @secure
   */

  getCommunityPosts = (variables: { postId: number; params?: RequestParams }) =>
    this.request<
      ResponseDTOGetCommunityPostResponseDtoType,
      | ErrorResponseDTOCommonType
      | {
          /** @example "UNAUTHORIZED_ACCESS" */
          errorCode?: string
          /** @example "인증이 필요한 접근입니다" */
          description?: string
        }
      | {
          /** @example "ACCESS_DENIED" */
          errorCode?: string
          /** @example "접근이 거부되었습니다" */
          description?: string
        }
      | void
    >({
      path: `/v1/community-post/${variables.postId}`,
      method: 'GET',
      secure: true,
      ...variables.params,
    }) /**
   * @description ## Lounge Community-post 삭제 - 작성자 본인만 삭제할 수 있습니다
   *
   * @tags [Community Post API]
   * @name DeleteCommunityPosts
   * @summary Lounge Community-post 삭제
   * @request DELETE:/v1/community-post/{postId}
   * @secure
   */

  deleteCommunityPosts = (variables: {
    postId: number
    params?: RequestParams
  }) =>
    this.request<
      ResponseDTOVoidType,
      | ErrorResponseDTOCommonType
      | {
          /** @example "UNAUTHORIZED_ACCESS" */
          errorCode?: string
          /** @example "인증이 필요한 접근입니다" */
          description?: string
        }
      | void
    >({
      path: `/v1/community-post/${variables.postId}`,
      method: 'DELETE',
      secure: true,
      ...variables.params,
    }) /**
   * @description ## Lounge 게시글 댓글 삭제 - 본인이 작성한 댓글만 삭제 가능합니다
   *
   * @tags [Community Post API]
   * @name DeleteCommunityPostsComments
   * @summary Lounge 게시글 댓글 삭제
   * @request DELETE:/v1/community-post/{postId}/comments/{commentId}
   * @secure
   */

  deleteCommunityPostsComments = (variables: {
    postId: number
    commentId: number
    params?: RequestParams
  }) =>
    this.request<
      ResponseDTOVoidType,
      | ErrorResponseDTOCommonType
      | {
          /** @example "UNAUTHORIZED_ACCESS" */
          errorCode?: string
          /** @example "인증이 필요한 접근입니다" */
          description?: string
        }
      | {
          /** @example "ACCESS_DENIED" */
          errorCode?: string
          /** @example "접근이 거부되었습니다" */
          description?: string
        }
    >({
      path: `/v1/community-post/${variables.postId}/comments/${variables.commentId}`,
      method: 'DELETE',
      secure: true,
      ...variables.params,
    })
}

//
