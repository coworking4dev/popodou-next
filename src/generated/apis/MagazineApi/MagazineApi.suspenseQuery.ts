/**
 * !DO NOT EDIT THIS FILE
 *
 * 스크립트가 실행될때, 파일을 항상 새로 쓰기 때문에 파일 수정시 작성내용이 제거 될 수 있습니다.
 */
/**
 * tok-cli.config.ts 에서 설정된 instance 경로의 axios instace 가 적용된, api 의 instance 입니다.
 */
import {
  InfiniteData,
  useSuspenseInfiniteQuery,
  useSuspenseQuery,
} from '@tanstack/react-query'

import { fetchExtended } from '@/configs/fetch/fetch-extend'

import { ErrorResponseDTOCommonType } from '../@types/data-contracts'
import {
  Parameter,
  RequestFnReturn,
  SuspenseInfiniteQueryHookParams,
  SuspenseQueryHookParams,
} from '../@types/react-query-type'
import { MagazineApiApi } from './MagazineApi.api'

export const magazineApiApi = new MagazineApiApi({
  customFetch: fetchExtended,
})

/**
 * query key 에 undefined 를 포함시키지 않기 위한 함수입니다.
 */
const isDefined = (v: unknown) => typeof v !== 'undefined'

/**
 * query-keys
 */

export const QUERY_KEY_MAGAZINE_API_API = {
  GET_COMMENTS_1: (variables?: Parameter<typeof magazineApiApi.getComments1>) =>
    ['GET_COMMENTS_1', variables].filter(isDefined),
  ADD_COMMENT_1: () => ['ADD_COMMENT_1'],
  GET_MAGAZINE_LIST: (
    variables?: Parameter<typeof magazineApiApi.getMagazineList>,
  ) => ['GET_MAGAZINE_LIST', variables].filter(isDefined),
  GET_MAGAZINE_LIST_INFINITE: (
    variables?: Parameter<typeof magazineApiApi.getMagazineList>,
  ) => ['GET_MAGAZINE_LIST_INFINITE', variables].filter(isDefined),
  GET_MAGAZINE_DETAIL: (
    variables?: Parameter<typeof magazineApiApi.getMagazineDetail>,
  ) => ['GET_MAGAZINE_DETAIL', variables].filter(isDefined),
  DELETE_COMMENT_1: () => ['DELETE_COMMENT_1'],
}

/**
 * @description ## Magazine 댓글 조회 - isMime = true 인 댓글에는 삭제버튼 노출
 *
 * @tags [Magazine API]
 * @name GetComments1
 * @summary Magazine 댓글 조회
 * @request GET:/v1/magazines/{magazineId}/comments
 * @secure    */

export const useGetComments1SuspenseQuery = <
  TData = RequestFnReturn<typeof magazineApiApi.getComments1>,
>(
  params: SuspenseQueryHookParams<
    typeof magazineApiApi.getComments1,
    {
      error:
        | ErrorResponseDTOCommonType
        | {
            /** @example "UNAUTHORIZED_ACCESS" */
            errorCode?: string
            /** @example "인증이 필요한 접근입니다" */
            description?: string
          }
        | {
            /** @example "ACCESS_DENIED" */
            errorCode?: string
            /** @example "접근이 거부되었습니다" */
            description?: string
          }
    },
    TData
  >,
) => {
  const queryKey = QUERY_KEY_MAGAZINE_API_API.GET_COMMENTS_1(params.variables)
  return useSuspenseQuery({
    queryKey,
    queryFn: () => magazineApiApi.getComments1(params.variables),
    ...params?.options,
  })
}

/**
 * @name getComments1QueryOptions
 * @description 이 옵션은 Suspense 기반의 병렬 데이터 쿼리를 위한 설정입니다.
 * `useSuspenseQueries`를 사용하여 여러 쿼리를 병렬로 처리할 때 활용하세요.
 */

export const getComments1SuspenseQueryOptions = <
  TData = RequestFnReturn<typeof magazineApiApi.getComments1>,
>(
  params: SuspenseQueryHookParams<
    typeof magazineApiApi.getComments1,
    {
      error:
        | ErrorResponseDTOCommonType
        | {
            /** @example "UNAUTHORIZED_ACCESS" */
            errorCode?: string
            /** @example "인증이 필요한 접근입니다" */
            description?: string
          }
        | {
            /** @example "ACCESS_DENIED" */
            errorCode?: string
            /** @example "접근이 거부되었습니다" */
            description?: string
          }
    },
    TData
  >,
) => {
  const queryKey = QUERY_KEY_MAGAZINE_API_API.GET_COMMENTS_1(params.variables)
  return {
    queryKey,
    queryFn: () => magazineApiApi.getComments1(params.variables),
    ...params?.options,
  }
}

/**
 * @description ## Magazine Tab 무한스크롤 조회 - 초기 조회 시에는 cursor = null로 요청하시고 그 다음 스크롤 부터 response의 cursor 사
 *
 * @tags [Magazine API]
 * @name GetMagazineList
 * @summary Magazine Tab 무한스크롤 조회
 * @request GET:/v1/magazines
 * @secure    */

export const useGetMagazineListSuspenseQuery = <
  TData = RequestFnReturn<typeof magazineApiApi.getMagazineList>,
>(
  params?: SuspenseQueryHookParams<
    typeof magazineApiApi.getMagazineList,
    {
      error:
        | ErrorResponseDTOCommonType
        | {
            /** @example "UNAUTHORIZED_ACCESS" */
            errorCode?: string
            /** @example "인증이 필요한 접근입니다" */
            description?: string
          }
        | {
            /** @example "ACCESS_DENIED" */
            errorCode?: string
            /** @example "접근이 거부되었습니다" */
            description?: string
          }
    },
    TData
  >,
) => {
  const queryKey = QUERY_KEY_MAGAZINE_API_API.GET_MAGAZINE_LIST(
    params?.variables,
  )
  return useSuspenseQuery({
    queryKey,
    queryFn: () => magazineApiApi.getMagazineList(params?.variables),
    ...params?.options,
  })
}

/**
 * @name getMagazineListQueryOptions
 * @description 이 옵션은 Suspense 기반의 병렬 데이터 쿼리를 위한 설정입니다.
 * `useSuspenseQueries`를 사용하여 여러 쿼리를 병렬로 처리할 때 활용하세요.
 */

export const getMagazineListSuspenseQueryOptions = <
  TData = RequestFnReturn<typeof magazineApiApi.getMagazineList>,
>(
  params?: SuspenseQueryHookParams<
    typeof magazineApiApi.getMagazineList,
    {
      error:
        | ErrorResponseDTOCommonType
        | {
            /** @example "UNAUTHORIZED_ACCESS" */
            errorCode?: string
            /** @example "인증이 필요한 접근입니다" */
            description?: string
          }
        | {
            /** @example "ACCESS_DENIED" */
            errorCode?: string
            /** @example "접근이 거부되었습니다" */
            description?: string
          }
    },
    TData
  >,
) => {
  const queryKey = QUERY_KEY_MAGAZINE_API_API.GET_MAGAZINE_LIST(
    params?.variables,
  )
  return {
    queryKey,
    queryFn: () => magazineApiApi.getMagazineList(params?.variables),
    ...params?.options,
  }
}

/**
 * @description ## Magazine Tab 무한스크롤 조회 - 초기 조회 시에는 cursor = null로 요청하시고 그 다음 스크롤 부터 response의 cursor 사    *      * @tags [Magazine API]
 * @name GetMagazineList
 * @summary Magazine Tab 무한스크롤 조회
 * @request GET:/v1/magazines
 * @secure    */

export const useGetMagazineListInfiniteSuspenseQuery = <
  TData = InfiniteData<
    RequestFnReturn<typeof magazineApiApi.getMagazineList>,
    Parameter<typeof magazineApiApi.getMagazineList>
  >,
>(
  params?: SuspenseInfiniteQueryHookParams<
    typeof magazineApiApi.getMagazineList,
    | ErrorResponseDTOCommonType
    | {
        /** @example "UNAUTHORIZED_ACCESS" */
        errorCode?: string
        /** @example "인증이 필요한 접근입니다" */
        description?: string
      }
    | {
        /** @example "ACCESS_DENIED" */
        errorCode?: string
        /** @example "접근이 거부되었습니다" */
        description?: string
      },
    TData
  >,
) => {
  const queryKey = QUERY_KEY_MAGAZINE_API_API.GET_MAGAZINE_LIST_INFINITE(
    params?.variables,
  )
  return useSuspenseInfiniteQuery({
    queryKey,
    initialPageParam: null,
    queryFn: ({ pageParam }) => {
      return magazineApiApi.getMagazineList({
        ...params?.variables,
        query: { ...params?.variables?.query },
      })
    },
    getNextPageParam: (lastPage) => {
      const cursor = lastPage?.data?.cursor ?? null
      return cursor
    },
    ...params?.options,
  })
}

/**
 * @description ## Magazine 상세 조회 - 어떠한 이유로 접근 불가능하더라도 동일한 MAGAZINE_ACCESS_DENIED 예외 반환.
 *
 * @tags [Magazine API]
 * @name GetMagazineDetail
 * @summary Magazine 상세 조회
 * @request GET:/v1/magazines/{magazineId}
 * @secure    */

export const useGetMagazineDetailSuspenseQuery = <
  TData = RequestFnReturn<typeof magazineApiApi.getMagazineDetail>,
>(
  params: SuspenseQueryHookParams<
    typeof magazineApiApi.getMagazineDetail,
    {
      error:
        | void
        | {
            /** @example "UNAUTHORIZED_ACCESS" */
            errorCode?: string
            /** @example "인증이 필요한 접근입니다" */
            description?: string
          }
        | {
            /** @example "ACCESS_DENIED" */
            errorCode?: string
            /** @example "접근이 거부되었습니다" */
            description?: string
          }
    },
    TData
  >,
) => {
  const queryKey = QUERY_KEY_MAGAZINE_API_API.GET_MAGAZINE_DETAIL(
    params.variables,
  )
  return useSuspenseQuery({
    queryKey,
    queryFn: () => magazineApiApi.getMagazineDetail(params.variables),
    ...params?.options,
  })
}

/**
 * @name getMagazineDetailQueryOptions
 * @description 이 옵션은 Suspense 기반의 병렬 데이터 쿼리를 위한 설정입니다.
 * `useSuspenseQueries`를 사용하여 여러 쿼리를 병렬로 처리할 때 활용하세요.
 */

export const getMagazineDetailSuspenseQueryOptions = <
  TData = RequestFnReturn<typeof magazineApiApi.getMagazineDetail>,
>(
  params: SuspenseQueryHookParams<
    typeof magazineApiApi.getMagazineDetail,
    {
      error:
        | void
        | {
            /** @example "UNAUTHORIZED_ACCESS" */
            errorCode?: string
            /** @example "인증이 필요한 접근입니다" */
            description?: string
          }
        | {
            /** @example "ACCESS_DENIED" */
            errorCode?: string
            /** @example "접근이 거부되었습니다" */
            description?: string
          }
    },
    TData
  >,
) => {
  const queryKey = QUERY_KEY_MAGAZINE_API_API.GET_MAGAZINE_DETAIL(
    params.variables,
  )
  return {
    queryKey,
    queryFn: () => magazineApiApi.getMagazineDetail(params.variables),
    ...params?.options,
  }
}

/**
 * !DO NOT EDIT THIS FILE
 *
 * 스크립트가 실행될때, 파일을 항상 새로 쓰기 때문에 파일 수정시 작성내용이 제거 될 수 있습니다.
 */

/**
 * !DO NOT EDIT THIS FILE
 *
 * 스크립트가 실행될때, 파일을 항상 새로 쓰기 때문에 파일 수정시 작성내용이 제거 될 수 있습니다.
 */

/**
 * tok-cli.config.ts 에서 설정된 instance 경로의 axios instace 가 적용된, api 의 instance 입니다.
 */
