/**
 * !DO NOT EDIT THIS FILE
 *
 * 스크립트가 실행될때, 파일을 항상 새로 쓰기 때문에 파일 수정시 작성내용이 제거 될 수 있습니다.
 */
/**
 * tok-cli.config.ts 에서 설정된 instance 경로의 axios instace 가 적용된, api 의 instance 입니다.
 */
import { useMutation } from '@tanstack/react-query'

import { fetchExtended } from '@/configs/fetch/fetch-extend'

import { ErrorResponseDTOCommonType } from '../@types/data-contracts'
import { MutationHookParams } from '../@types/react-query-type'
import { UserApiApi } from './UserApi.api'

export const userApiApi = new UserApiApi({ customFetch: fetchExtended })

/**
 * query key 에 undefined 를 포함시키지 않기 위한 함수입니다.
 */
const isDefined = (v: unknown) => typeof v !== 'undefined'

/**
 * query-keys
 */

export const QUERY_KEY_USER_API_API = {
  REGISTER_USER: () => ['REGISTER_USER'],
  REGISTER_SOCIAL_USER: () => ['REGISTER_SOCIAL_USER'],
  USER_REFRESH: () => ['USER_REFRESH'],
  PASSWORD_RESET_CONFIRM: () => ['PASSWORD_RESET_CONFIRM'],
  CHANGE_PASSWORD: () => ['CHANGE_PASSWORD'],
  LOGIN: () => ['LOGIN'],
  DELETE_USER: () => ['DELETE_USER'],
}

/**
 * No description
 *
 * @tags [User API]
 * @name RegisterUser
 * @summary 자체 회원가입
 * @request POST:/v1/user/register
 * @secure  */

export const useRegisterUserMutation = (
  params: MutationHookParams<
    typeof userApiApi.registerUser,
    {
      error:
        | void
        | {
            /** @example "UNAUTHORIZED_ACCESS" */
            errorCode?: string
            /** @example "인증이 필요한 접근입니다" */
            description?: string
          }
        | {
            /** @example "ACCESS_DENIED" */
            errorCode?: string
            /** @example "접근이 거부되었습니다" */
            description?: string
          }
    }
  >,
) => {
  const mutationKey = QUERY_KEY_USER_API_API.REGISTER_USER()
  return useMutation({
    mutationKey,
    mutationFn: userApiApi.registerUser,
    ...params?.options,
  })
}

/**
 * No description
 *
 * @tags [User API]
 * @name RegisterSocialUser
 * @summary 소셜 회원가입
 * @request POST:/v1/user/register-oauth2
 * @secure  */

export const useRegisterSocialUserMutation = (
  params: MutationHookParams<
    typeof userApiApi.registerSocialUser,
    {
      error:
        | void
        | {
            /** @example "UNAUTHORIZED_ACCESS" */
            errorCode?: string
            /** @example "인증이 필요한 접근입니다" */
            description?: string
          }
        | {
            /** @example "ACCESS_DENIED" */
            errorCode?: string
            /** @example "접근이 거부되었습니다" */
            description?: string
          }
    }
  >,
) => {
  const mutationKey = QUERY_KEY_USER_API_API.REGISTER_SOCIAL_USER()
  return useMutation({
    mutationKey,
    mutationFn: userApiApi.registerSocialUser,
    ...params?.options,
  })
}

/**
 * No description
 *
 * @tags [User API]
 * @name UserRefresh
 * @summary 유저 리프레시
 * @request POST:/v1/user/refresh
 * @secure  */

export const useUserRefreshMutation = (
  params: MutationHookParams<
    typeof userApiApi.userRefresh,
    {
      error:
        | ErrorResponseDTOCommonType
        | {
            /** @example "UNAUTHORIZED_ACCESS" */
            errorCode?: string
            /** @example "인증이 필요한 접근입니다" */
            description?: string
          }
        | {
            /** @example "ACCESS_DENIED" */
            errorCode?: string
            /** @example "접근이 거부되었습니다" */
            description?: string
          }
    }
  >,
) => {
  const mutationKey = QUERY_KEY_USER_API_API.USER_REFRESH()
  return useMutation({
    mutationKey,
    mutationFn: userApiApi.userRefresh,
    ...params?.options,
  })
}

/**
 * No description
 *
 * @tags [User API]
 * @name PasswordResetConfirm
 * @summary 유저 비밀번호 초기화
 * @request POST:/v1/user/password-reset
 * @secure  */

export const usePasswordResetConfirmMutation = (
  params: MutationHookParams<
    typeof userApiApi.passwordResetConfirm,
    {
      error:
        | void
        | {
            /** @example "UNAUTHORIZED_ACCESS" */
            errorCode?: string
            /** @example "인증이 필요한 접근입니다" */
            description?: string
          }
        | {
            /** @example "ACCESS_DENIED" */
            errorCode?: string
            /** @example "접근이 거부되었습니다" */
            description?: string
          }
    }
  >,
) => {
  const mutationKey = QUERY_KEY_USER_API_API.PASSWORD_RESET_CONFIRM()
  return useMutation({
    mutationKey,
    mutationFn: userApiApi.passwordResetConfirm,
    ...params?.options,
  })
}

/**
 * No description
 *
 * @tags [User API]
 * @name ChangePassword
 * @summary 유저 비밀번호 변경
 * @request POST:/v1/user/password-change
 * @secure  */

export const useChangePasswordMutation = (
  params: MutationHookParams<
    typeof userApiApi.changePassword,
    {
      error:
        | void
        | {
            /** @example "UNAUTHORIZED_ACCESS" */
            errorCode?: string
            /** @example "인증이 필요한 접근입니다" */
            description?: string
          }
        | {
            /** @example "ACCESS_DENIED" */
            errorCode?: string
            /** @example "접근이 거부되었습니다" */
            description?: string
          }
    }
  >,
) => {
  const mutationKey = QUERY_KEY_USER_API_API.CHANGE_PASSWORD()
  return useMutation({
    mutationKey,
    mutationFn: userApiApi.changePassword,
    ...params?.options,
  })
}

/**
 * No description
 *
 * @tags [User API]
 * @name Login
 * @summary 시스템 로그인
 * @request POST:/v1/user/login
 * @secure  */

export const useLoginMutation = (
  params: MutationHookParams<
    typeof userApiApi.login,
    {
      error:
        | void
        | {
            /** @example "UNAUTHORIZED_ACCESS" */
            errorCode?: string
            /** @example "인증이 필요한 접근입니다" */
            description?: string
          }
        | {
            /** @example "ACCESS_DENIED" */
            errorCode?: string
            /** @example "접근이 거부되었습니다" */
            description?: string
          }
    }
  >,
) => {
  const mutationKey = QUERY_KEY_USER_API_API.LOGIN()
  return useMutation({
    mutationKey,
    mutationFn: userApiApi.login,
    ...params?.options,
  })
}

/**
 * @description ## 회원 탈퇴 - id는 me로 요청
 *
 * @tags [User API]
 * @name DeleteUser
 * @summary 회원 탈퇴
 * @request DELETE:/v1/user/{id}
 * @secure  */

export const useDeleteUserMutation = (
  params: MutationHookParams<
    typeof userApiApi.deleteUser,
    {
      error:
        | ErrorResponseDTOCommonType
        | {
            /** @example "UNAUTHORIZED_ACCESS" */
            errorCode?: string
            /** @example "인증이 필요한 접근입니다" */
            description?: string
          }
        | {
            /** @example "ACCESS_DENIED" */
            errorCode?: string
            /** @example "접근이 거부되었습니다" */
            description?: string
          }
        | void
    }
  >,
) => {
  const mutationKey = QUERY_KEY_USER_API_API.DELETE_USER()
  return useMutation({
    mutationKey,
    mutationFn: userApiApi.deleteUser,
    ...params?.options,
  })
}

/**
 * !DO NOT EDIT THIS FILE
 *
 * 스크립트가 실행될때, 파일을 항상 새로 쓰기 때문에 파일 수정시 작성내용이 제거 될 수 있습니다.
 */

/**
 * !DO NOT EDIT THIS FILE
 *
 * 스크립트가 실행될때, 파일을 항상 새로 쓰기 때문에 파일 수정시 작성내용이 제거 될 수 있습니다.
 */

/**
 * tok-cli.config.ts 에서 설정된 instance 경로의 axios instace 가 적용된, api 의 instance 입니다.
 */
