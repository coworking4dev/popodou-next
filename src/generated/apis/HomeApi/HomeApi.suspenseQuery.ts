/**
 * !DO NOT EDIT THIS FILE
 *
 * 스크립트가 실행될때, 파일을 항상 새로 쓰기 때문에 파일 수정시 작성내용이 제거 될 수 있습니다.
 */
/**
 * tok-cli.config.ts 에서 설정된 instance 경로의 axios instace 가 적용된, api 의 instance 입니다.
 */
import { useSuspenseQuery } from '@tanstack/react-query'

import { fetchExtended } from '@/configs/fetch/fetch-extend'

import { ErrorResponseDTOCommonType } from '../@types/data-contracts'
import {
  Parameter,
  RequestFnReturn,
  SuspenseQueryHookParams,
} from '../@types/react-query-type'
import { HomeApiApi } from './HomeApi.api'

export const homeApiApi = new HomeApiApi({ customFetch: fetchExtended })

/**
 * query key 에 undefined 를 포함시키지 않기 위한 함수입니다.
 */
const isDefined = (v: unknown) => typeof v !== 'undefined'

/**
 * query-keys
 */

export const QUERY_KEY_HOME_API_API = {
  GET_THIS_MONTH_POPUP: (
    variables?: Parameter<typeof homeApiApi.getThisMonthPopup>,
  ) => ['GET_THIS_MONTH_POPUP', variables].filter(isDefined),
  GET_POPUP_STORIES: (
    variables?: Parameter<typeof homeApiApi.getPopupStories>,
  ) => ['GET_POPUP_STORIES', variables].filter(isDefined),
  GET_MOST_LIKED_POPUP: (
    variables?: Parameter<typeof homeApiApi.getMostLikedPopup>,
  ) => ['GET_MOST_LIKED_POPUP', variables].filter(isDefined),
}

/**
 * @description ## 2. This Month’s Pop-up Events - 오늘을 기준으로 앞으로 예정된 팝업들을 최신순으로 나열 - 오늘 포함 시 노출됨 - 오늘이 지난 팝업은 노출되지 않음 - 메인에 보여지는 UI는 최대 9개 고정
 *
 * @tags [Home API]
 * @name GetThisMonthPopup
 * @summary 2. This Month’s Pop-up Events
 * @request GET:/v1/home/this-month
 * @secure    */

export const useGetThisMonthPopupSuspenseQuery = <
  TData = RequestFnReturn<typeof homeApiApi.getThisMonthPopup>,
>(
  params?: SuspenseQueryHookParams<
    typeof homeApiApi.getThisMonthPopup,
    {
      error:
        | ErrorResponseDTOCommonType
        | {
            /** @example "UNAUTHORIZED_ACCESS" */
            errorCode?: string
            /** @example "인증이 필요한 접근입니다" */
            description?: string
          }
        | {
            /** @example "ACCESS_DENIED" */
            errorCode?: string
            /** @example "접근이 거부되었습니다" */
            description?: string
          }
    },
    TData
  >,
) => {
  const queryKey = QUERY_KEY_HOME_API_API.GET_THIS_MONTH_POPUP(
    params?.variables,
  )
  return useSuspenseQuery({
    queryKey,
    queryFn: () => homeApiApi.getThisMonthPopup(params?.variables),
    ...params?.options,
  })
}

/**
 * @name getThisMonthPopupQueryOptions
 * @description 이 옵션은 Suspense 기반의 병렬 데이터 쿼리를 위한 설정입니다.
 * `useSuspenseQueries`를 사용하여 여러 쿼리를 병렬로 처리할 때 활용하세요.
 */

export const getThisMonthPopupSuspenseQueryOptions = <
  TData = RequestFnReturn<typeof homeApiApi.getThisMonthPopup>,
>(
  params?: SuspenseQueryHookParams<
    typeof homeApiApi.getThisMonthPopup,
    {
      error:
        | ErrorResponseDTOCommonType
        | {
            /** @example "UNAUTHORIZED_ACCESS" */
            errorCode?: string
            /** @example "인증이 필요한 접근입니다" */
            description?: string
          }
        | {
            /** @example "ACCESS_DENIED" */
            errorCode?: string
            /** @example "접근이 거부되었습니다" */
            description?: string
          }
    },
    TData
  >,
) => {
  const queryKey = QUERY_KEY_HOME_API_API.GET_THIS_MONTH_POPUP(
    params?.variables,
  )
  return {
    queryKey,
    queryFn: () => homeApiApi.getThisMonthPopup(params?.variables),
    ...params?.options,
  }
}

/**
 * @description ## 4. Pop-up Stories - 어드민에서 지정한 4개의 Magazine 데이터
 *
 * @tags [Home API]
 * @name GetPopupStories
 * @summary 4. Pop-up Stories
 * @request GET:/v1/home/popup-stories
 * @secure    */

export const useGetPopupStoriesSuspenseQuery = <
  TData = RequestFnReturn<typeof homeApiApi.getPopupStories>,
>(
  params?: SuspenseQueryHookParams<
    typeof homeApiApi.getPopupStories,
    {
      error:
        | ErrorResponseDTOCommonType
        | {
            /** @example "UNAUTHORIZED_ACCESS" */
            errorCode?: string
            /** @example "인증이 필요한 접근입니다" */
            description?: string
          }
        | {
            /** @example "ACCESS_DENIED" */
            errorCode?: string
            /** @example "접근이 거부되었습니다" */
            description?: string
          }
    },
    TData
  >,
) => {
  const queryKey = QUERY_KEY_HOME_API_API.GET_POPUP_STORIES(params?.variables)
  return useSuspenseQuery({
    queryKey,
    queryFn: () => homeApiApi.getPopupStories(params?.variables),
    ...params?.options,
  })
}

/**
 * @name getPopupStoriesQueryOptions
 * @description 이 옵션은 Suspense 기반의 병렬 데이터 쿼리를 위한 설정입니다.
 * `useSuspenseQueries`를 사용하여 여러 쿼리를 병렬로 처리할 때 활용하세요.
 */

export const getPopupStoriesSuspenseQueryOptions = <
  TData = RequestFnReturn<typeof homeApiApi.getPopupStories>,
>(
  params?: SuspenseQueryHookParams<
    typeof homeApiApi.getPopupStories,
    {
      error:
        | ErrorResponseDTOCommonType
        | {
            /** @example "UNAUTHORIZED_ACCESS" */
            errorCode?: string
            /** @example "인증이 필요한 접근입니다" */
            description?: string
          }
        | {
            /** @example "ACCESS_DENIED" */
            errorCode?: string
            /** @example "접근이 거부되었습니다" */
            description?: string
          }
    },
    TData
  >,
) => {
  const queryKey = QUERY_KEY_HOME_API_API.GET_POPUP_STORIES(params?.variables)
  return {
    queryKey,
    queryFn: () => homeApiApi.getPopupStories(params?.variables),
    ...params?.options,
  }
}

/**
 * @description ## 1. Top 10 Most Liked Pop-ups - 좋아요 수가 많은 10개의 팝업
 *
 * @tags [Home API]
 * @name GetMostLikedPopup
 * @summary 1. Top 10 Most Liked Pop-ups
 * @request GET:/v1/home/most-liked
 * @secure    */

export const useGetMostLikedPopupSuspenseQuery = <
  TData = RequestFnReturn<typeof homeApiApi.getMostLikedPopup>,
>(
  params?: SuspenseQueryHookParams<
    typeof homeApiApi.getMostLikedPopup,
    {
      error:
        | ErrorResponseDTOCommonType
        | {
            /** @example "UNAUTHORIZED_ACCESS" */
            errorCode?: string
            /** @example "인증이 필요한 접근입니다" */
            description?: string
          }
        | {
            /** @example "ACCESS_DENIED" */
            errorCode?: string
            /** @example "접근이 거부되었습니다" */
            description?: string
          }
    },
    TData
  >,
) => {
  const queryKey = QUERY_KEY_HOME_API_API.GET_MOST_LIKED_POPUP(
    params?.variables,
  )
  return useSuspenseQuery({
    queryKey,
    queryFn: () => homeApiApi.getMostLikedPopup(params?.variables),
    ...params?.options,
  })
}

/**
 * @name getMostLikedPopupQueryOptions
 * @description 이 옵션은 Suspense 기반의 병렬 데이터 쿼리를 위한 설정입니다.
 * `useSuspenseQueries`를 사용하여 여러 쿼리를 병렬로 처리할 때 활용하세요.
 */

export const getMostLikedPopupSuspenseQueryOptions = <
  TData = RequestFnReturn<typeof homeApiApi.getMostLikedPopup>,
>(
  params?: SuspenseQueryHookParams<
    typeof homeApiApi.getMostLikedPopup,
    {
      error:
        | ErrorResponseDTOCommonType
        | {
            /** @example "UNAUTHORIZED_ACCESS" */
            errorCode?: string
            /** @example "인증이 필요한 접근입니다" */
            description?: string
          }
        | {
            /** @example "ACCESS_DENIED" */
            errorCode?: string
            /** @example "접근이 거부되었습니다" */
            description?: string
          }
    },
    TData
  >,
) => {
  const queryKey = QUERY_KEY_HOME_API_API.GET_MOST_LIKED_POPUP(
    params?.variables,
  )
  return {
    queryKey,
    queryFn: () => homeApiApi.getMostLikedPopup(params?.variables),
    ...params?.options,
  }
}

/**
 * !DO NOT EDIT THIS FILE
 *
 * 스크립트가 실행될때, 파일을 항상 새로 쓰기 때문에 파일 수정시 작성내용이 제거 될 수 있습니다.
 */

/**
 * !DO NOT EDIT THIS FILE
 *
 * 스크립트가 실행될때, 파일을 항상 새로 쓰기 때문에 파일 수정시 작성내용이 제거 될 수 있습니다.
 */

/**
 * tok-cli.config.ts 에서 설정된 instance 경로의 axios instace 가 적용된, api 의 instance 입니다.
 */
