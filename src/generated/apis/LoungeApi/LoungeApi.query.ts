/**
 * !DO NOT EDIT THIS FILE
 *
 * 스크립트가 실행될때, 파일을 항상 새로 쓰기 때문에 파일 수정시 작성내용이 제거 될 수 있습니다.
 */
/**
 * tok-cli.config.ts 에서 설정된 instance 경로의 axios instace 가 적용된, api 의 instance 입니다.
 */
import { InfiniteData, useInfiniteQuery, useQuery } from '@tanstack/react-query'

import { fetchExtended } from '@/configs/fetch/fetch-extend'

import { ErrorResponseDTOCommonType } from '../@types/data-contracts'
import {
  InfiniteQueryHookParams,
  Parameter,
  QueryHookParams,
  RequestFnReturn,
} from '../@types/react-query-type'
import { LoungeApiApi } from './LoungeApi.api'

export const loungeApiApi = new LoungeApiApi({ customFetch: fetchExtended })

/**
 * query key 에 undefined 를 포함시키지 않기 위한 함수입니다.
 */
const isDefined = (v: unknown) => typeof v !== 'undefined'

/**
 * query-keys
 */

export const QUERY_KEY_LOUNGE_API_API = {
  GET_ALL_LOUNGE_FEED: (
    variables?: Parameter<typeof loungeApiApi.getAllLoungeFeed>,
  ) => ['GET_ALL_LOUNGE_FEED', variables].filter(isDefined),
  GET_ALL_LOUNGE_FEED_INFINITE: (
    variables?: Parameter<typeof loungeApiApi.getAllLoungeFeed>,
  ) => ['GET_ALL_LOUNGE_FEED_INFINITE', variables].filter(isDefined),
}

/**
 * @description ## 라운지 전체 조회
 *
 * @tags [Lounge API]
 * @name GetAllLoungeFeed
 * @summary 라운지 전체 조회
 * @request GET:/v1/lounge
 * @secure    */

export const useGetAllLoungeFeedQuery = <
  TData = RequestFnReturn<typeof loungeApiApi.getAllLoungeFeed>,
>(
  params?: QueryHookParams<
    typeof loungeApiApi.getAllLoungeFeed,
    {
      error:
        | ErrorResponseDTOCommonType
        | {
            /** @example "UNAUTHORIZED_ACCESS" */
            errorCode?: string
            /** @example "인증이 필요한 접근입니다" */
            description?: string
          }
        | {
            /** @example "ACCESS_DENIED" */
            errorCode?: string
            /** @example "접근이 거부되었습니다" */
            description?: string
          }
    },
    TData
  >,
) => {
  const queryKey = QUERY_KEY_LOUNGE_API_API.GET_ALL_LOUNGE_FEED(
    params?.variables,
  )
  return useQuery({
    queryKey,
    queryFn: () => loungeApiApi.getAllLoungeFeed(params?.variables),
    ...params?.options,
  })
}

/**
 * @description ## 라운지 전체 조회    *      * @tags [Lounge API]
 * @name GetAllLoungeFeed
 * @summary 라운지 전체 조회
 * @request GET:/v1/lounge
 * @secure    */

export const useGetAllLoungeFeedInfiniteQuery = <
  TData = InfiniteData<
    RequestFnReturn<typeof loungeApiApi.getAllLoungeFeed>,
    Parameter<typeof loungeApiApi.getAllLoungeFeed>
  >,
>(
  params?: InfiniteQueryHookParams<
    typeof loungeApiApi.getAllLoungeFeed,
    | ErrorResponseDTOCommonType
    | {
        /** @example "UNAUTHORIZED_ACCESS" */
        errorCode?: string
        /** @example "인증이 필요한 접근입니다" */
        description?: string
      }
    | {
        /** @example "ACCESS_DENIED" */
        errorCode?: string
        /** @example "접근이 거부되었습니다" */
        description?: string
      },
    TData
  >,
) => {
  const queryKey = QUERY_KEY_LOUNGE_API_API.GET_ALL_LOUNGE_FEED_INFINITE(
    params?.variables,
  )
  return useInfiniteQuery({
    queryKey,
    initialPageParam: null,
    queryFn: ({ pageParam }) => {
      return loungeApiApi.getAllLoungeFeed({
        ...params?.variables,
        query: {
          ...params?.variables?.query,
          cursor: (pageParam as string) ?? undefined,
        },
      })
    },
    getNextPageParam: (lastPage) => {
      const cursor = lastPage?.data?.cursor ?? null
      return cursor
    },
    ...params?.options,
  })
}

/**
 * !DO NOT EDIT THIS FILE
 *
 * 스크립트가 실행될때, 파일을 항상 새로 쓰기 때문에 파일 수정시 작성내용이 제거 될 수 있습니다.
 */

/**
 * !DO NOT EDIT THIS FILE
 *
 * 스크립트가 실행될때, 파일을 항상 새로 쓰기 때문에 파일 수정시 작성내용이 제거 될 수 있습니다.
 */

/**
 * tok-cli.config.ts 에서 설정된 instance 경로의 axios instace 가 적용된, api 의 instance 입니다.
 */
