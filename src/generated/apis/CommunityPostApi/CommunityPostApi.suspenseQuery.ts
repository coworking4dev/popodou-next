/**
 * !DO NOT EDIT THIS FILE
 *
 * 스크립트가 실행될때, 파일을 항상 새로 쓰기 때문에 파일 수정시 작성내용이 제거 될 수 있습니다.
 */
/**
 * tok-cli.config.ts 에서 설정된 instance 경로의 axios instace 가 적용된, api 의 instance 입니다.
 */
import { useSuspenseQuery } from '@tanstack/react-query'

import { fetchExtended } from '@/configs/fetch/fetch-extend'

import { ErrorResponseDTOCommonType } from '../@types/data-contracts'
import {
  Parameter,
  RequestFnReturn,
  SuspenseQueryHookParams,
} from '../@types/react-query-type'
import { CommunityPostApiApi } from './CommunityPostApi.api'

export const communityPostApiApi = new CommunityPostApiApi({
  customFetch: fetchExtended,
})

/**
 * query key 에 undefined 를 포함시키지 않기 위한 함수입니다.
 */
const isDefined = (v: unknown) => typeof v !== 'undefined'

/**
 * query-keys
 */

export const QUERY_KEY_COMMUNITY_POST_API_API = {
  ADD_COMMUNITY_POSTS: () => ['ADD_COMMUNITY_POSTS'],
  ADD_COMMUNITY_POSTS_LIKE: () => ['ADD_COMMUNITY_POSTS_LIKE'],
  GET_COMMUNITY_POSTS_COMMENTS: (
    variables?: Parameter<typeof communityPostApiApi.getCommunityPostsComments>,
  ) => ['GET_COMMUNITY_POSTS_COMMENTS', variables].filter(isDefined),
  ADD_COMMUNITY_POSTS_COMMENTS: () => ['ADD_COMMUNITY_POSTS_COMMENTS'],
  REPORT_COMMUNITY_POSTS: () => ['REPORT_COMMUNITY_POSTS'],
  GET_COMMUNITY_POSTS: (
    variables?: Parameter<typeof communityPostApiApi.getCommunityPosts>,
  ) => ['GET_COMMUNITY_POSTS', variables].filter(isDefined),
  DELETE_COMMUNITY_POSTS: () => ['DELETE_COMMUNITY_POSTS'],
  DELETE_COMMUNITY_POSTS_COMMENTS: () => ['DELETE_COMMUNITY_POSTS_COMMENTS'],
}

/**
 * @description ## Lounge 게시글 댓글 조회 - 정렬 : 최신순
 *
 * @tags [Community Post API]
 * @name GetCommunityPostsComments
 * @summary Lounge 게시글 댓글 조회
 * @request GET:/v1/community-post/{postId}/comments
 * @secure    */

export const useGetCommunityPostsCommentsSuspenseQuery = <
  TData = RequestFnReturn<typeof communityPostApiApi.getCommunityPostsComments>,
>(
  params: SuspenseQueryHookParams<
    typeof communityPostApiApi.getCommunityPostsComments,
    {
      error:
        | ErrorResponseDTOCommonType
        | {
            /** @example "UNAUTHORIZED_ACCESS" */
            errorCode?: string
            /** @example "인증이 필요한 접근입니다" */
            description?: string
          }
        | {
            /** @example "ACCESS_DENIED" */
            errorCode?: string
            /** @example "접근이 거부되었습니다" */
            description?: string
          }
    },
    TData
  >,
) => {
  const queryKey =
    QUERY_KEY_COMMUNITY_POST_API_API.GET_COMMUNITY_POSTS_COMMENTS(
      params.variables,
    )
  return useSuspenseQuery({
    queryKey,
    queryFn: () =>
      communityPostApiApi.getCommunityPostsComments(params.variables),
    ...params?.options,
  })
}

/**
 * @name getCommunityPostsCommentsQueryOptions
 * @description 이 옵션은 Suspense 기반의 병렬 데이터 쿼리를 위한 설정입니다.
 * `useSuspenseQueries`를 사용하여 여러 쿼리를 병렬로 처리할 때 활용하세요.
 */

export const getCommunityPostsCommentsSuspenseQueryOptions = <
  TData = RequestFnReturn<typeof communityPostApiApi.getCommunityPostsComments>,
>(
  params: SuspenseQueryHookParams<
    typeof communityPostApiApi.getCommunityPostsComments,
    {
      error:
        | ErrorResponseDTOCommonType
        | {
            /** @example "UNAUTHORIZED_ACCESS" */
            errorCode?: string
            /** @example "인증이 필요한 접근입니다" */
            description?: string
          }
        | {
            /** @example "ACCESS_DENIED" */
            errorCode?: string
            /** @example "접근이 거부되었습니다" */
            description?: string
          }
    },
    TData
  >,
) => {
  const queryKey =
    QUERY_KEY_COMMUNITY_POST_API_API.GET_COMMUNITY_POSTS_COMMENTS(
      params.variables,
    )
  return {
    queryKey,
    queryFn: () =>
      communityPostApiApi.getCommunityPostsComments(params.variables),
    ...params?.options,
  }
}

/**
 * @description ## Lounge Community-post 조회 - 전달받은 community-post id 값에 해당하는 게시글을 조회하여 전달합니다
 *
 * @tags [Community Post API]
 * @name GetCommunityPosts
 * @summary Lounge Community-post 상세 조회
 * @request GET:/v1/community-post/{postId}
 * @secure    */

export const useGetCommunityPostsSuspenseQuery = <
  TData = RequestFnReturn<typeof communityPostApiApi.getCommunityPosts>,
>(
  params: SuspenseQueryHookParams<
    typeof communityPostApiApi.getCommunityPosts,
    {
      error:
        | ErrorResponseDTOCommonType
        | {
            /** @example "UNAUTHORIZED_ACCESS" */
            errorCode?: string
            /** @example "인증이 필요한 접근입니다" */
            description?: string
          }
        | {
            /** @example "ACCESS_DENIED" */
            errorCode?: string
            /** @example "접근이 거부되었습니다" */
            description?: string
          }
        | void
    },
    TData
  >,
) => {
  const queryKey = QUERY_KEY_COMMUNITY_POST_API_API.GET_COMMUNITY_POSTS(
    params.variables,
  )
  return useSuspenseQuery({
    queryKey,
    queryFn: () => communityPostApiApi.getCommunityPosts(params.variables),
    ...params?.options,
  })
}

/**
 * @name getCommunityPostsQueryOptions
 * @description 이 옵션은 Suspense 기반의 병렬 데이터 쿼리를 위한 설정입니다.
 * `useSuspenseQueries`를 사용하여 여러 쿼리를 병렬로 처리할 때 활용하세요.
 */

export const getCommunityPostsSuspenseQueryOptions = <
  TData = RequestFnReturn<typeof communityPostApiApi.getCommunityPosts>,
>(
  params: SuspenseQueryHookParams<
    typeof communityPostApiApi.getCommunityPosts,
    {
      error:
        | ErrorResponseDTOCommonType
        | {
            /** @example "UNAUTHORIZED_ACCESS" */
            errorCode?: string
            /** @example "인증이 필요한 접근입니다" */
            description?: string
          }
        | {
            /** @example "ACCESS_DENIED" */
            errorCode?: string
            /** @example "접근이 거부되었습니다" */
            description?: string
          }
        | void
    },
    TData
  >,
) => {
  const queryKey = QUERY_KEY_COMMUNITY_POST_API_API.GET_COMMUNITY_POSTS(
    params.variables,
  )
  return {
    queryKey,
    queryFn: () => communityPostApiApi.getCommunityPosts(params.variables),
    ...params?.options,
  }
}

/**
 * !DO NOT EDIT THIS FILE
 *
 * 스크립트가 실행될때, 파일을 항상 새로 쓰기 때문에 파일 수정시 작성내용이 제거 될 수 있습니다.
 */

/**
 * !DO NOT EDIT THIS FILE
 *
 * 스크립트가 실행될때, 파일을 항상 새로 쓰기 때문에 파일 수정시 작성내용이 제거 될 수 있습니다.
 */

/**
 * tok-cli.config.ts 에서 설정된 instance 경로의 axios instace 가 적용된, api 의 instance 입니다.
 */
